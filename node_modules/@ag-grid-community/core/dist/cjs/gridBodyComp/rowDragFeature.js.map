{"version":3,"sources":["../../src/ts/gridBodyComp/rowDragFeature.ts"],"names":[],"mappings":"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","file":"rowDragFeature.js","sourcesContent":["import {\n    DragAndDropService, DraggingEvent, DragSourceType, DropTarget,\n    VerticalDirection\n} from \"../dragAndDrop/dragAndDropService\";\nimport { Autowired, Optional, PostConstruct } from \"../context/context\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { FocusController } from \"../focusController\";\nimport { IRangeController } from \"../interfaces/iRangeController\";\nimport { RowDragEvent, RowDragEnterEvent, RowDragLeaveEvent, RowDragMoveEvent, RowDragEndEvent } from \"../events\";\nimport { Events } from \"../eventKeys\";\nimport { IRowModel } from \"../interfaces/iRowModel\";\nimport { IClientSideRowModel } from \"../interfaces/iClientSideRowModel\";\nimport { RowNode } from \"../entities/rowNode\";\nimport { SelectionController } from \"../selectionController\";\nimport { MouseEventService } from \"./mouseEventService\";\nimport { last } from '../utils/array';\nimport { SortController } from \"../sortController\";\nimport { FilterManager } from \"../filter/filterManager\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { exists, missingOrEmpty } from \"../utils/generic\";\nimport { doOnce } from \"../utils/function\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { ControllersService } from \"../controllersService\";\n\nexport interface RowDropZoneEvents {\n    onDragEnter?: (params: RowDragEnterEvent) => void;\n    onDragLeave?: (params: RowDragLeaveEvent) => void;\n    onDragging?: (params: RowDragMoveEvent) => void;\n    onDragStop?: (params: RowDragEndEvent) => void;\n}\n\nexport interface RowDropZoneParams extends RowDropZoneEvents {\n    getContainer: () => HTMLElement;\n}\n\nexport class RowDragFeature extends BeanStub implements DropTarget {\n\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    // this feature is only created when row model is ClientSide, so we can type it as ClientSide\n    @Autowired('rowModel') private rowModel: IRowModel;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('focusController') private focusController: FocusController;\n    @Autowired('sortController') private sortController: SortController;\n    @Autowired('filterManager') private filterManager: FilterManager;\n    @Autowired('selectionController') private selectionController: SelectionController;\n    @Optional('rangeController') private rangeController: IRangeController;\n    @Autowired('mouseEventService') private mouseEventService: MouseEventService;\n    @Autowired('controllersService') private controllersService: ControllersService;\n\n    private clientSideRowModel: IClientSideRowModel;\n    private eContainer: HTMLElement;\n    private needToMoveUp: boolean;\n    private needToMoveDown: boolean;\n    private movingIntervalId: number | null;\n    private intervalCount: number;\n    private lastDraggingEvent: DraggingEvent;\n    private isMultiRowDrag: boolean = false;\n    private isGridSorted: boolean = false;\n    private isGridFiltered: boolean = false;\n    private isRowGroupActive: boolean = false;\n\n    constructor(eContainer: HTMLElement) {\n        super();\n        this.eContainer = eContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        if (this.gridOptionsWrapper.isRowModelDefault()) {\n            this.clientSideRowModel = this.rowModel as IClientSideRowModel;\n        }\n\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.onRowGroupChanged.bind(this));\n\n        this.onSortChanged();\n        this.onFilterChanged();\n        this.onRowGroupChanged();\n    }\n\n    private onSortChanged(): void {\n        this.isGridSorted = this.sortController.isSortActive();\n    }\n\n    private onFilterChanged(): void {\n        this.isGridFiltered = this.filterManager.isAnyFilterPresent();\n    }\n\n    private onRowGroupChanged(): void {\n        const rowGroups = this.columnController.getRowGroupColumns();\n        this.isRowGroupActive = !missingOrEmpty(rowGroups);\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n\n    public isInterestedIn(type: DragSourceType): boolean {\n        return type === DragSourceType.RowDrag;\n    }\n\n    public getIconName(): string {\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return DragAndDropService.ICON_NOT_ALLOWED;\n        }\n\n        return DragAndDropService.ICON_MOVE;\n    }\n\n    public shouldPreventRowMove(): boolean {\n        return this.isGridSorted || this.isGridFiltered || this.isRowGroupActive;\n    }\n\n    private getRowNodes(draggingEvent: DraggingEvent): RowNode[] {\n        if (!this.isFromThisGrid(draggingEvent)) {\n            return draggingEvent.dragItem.rowNodes || [];\n        }\n\n        const enableMultiRowDragging = this.gridOptionsWrapper.isEnableMultiRowDragging();\n        const selectedNodes = this.selectionController.getSelectedNodes();\n        const currentNode = draggingEvent.dragItem.rowNode!;\n\n        if (enableMultiRowDragging && selectedNodes.indexOf(currentNode) !== -1) {\n            this.isMultiRowDrag = true;\n            return [...selectedNodes];\n        }\n\n        this.isMultiRowDrag = false;\n\n        return [currentNode];\n    }\n\n    public onDragEnter(draggingEvent: DraggingEvent): void {\n        // when entering, we fire the enter event, then in onEnterOrDragging,\n        // we also fire the move event. so we get both events when entering.\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_ENTER, draggingEvent);\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(true);\n        });\n\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    public onDragging(draggingEvent: DraggingEvent): void {\n        this.onEnterOrDragging(draggingEvent);\n    }\n\n    private isFromThisGrid(draggingEvent: DraggingEvent) {\n        const { dragSourceDomDataKey } = draggingEvent.dragSource;\n\n        return dragSourceDomDataKey === this.gridOptionsWrapper.getDomDataKey();\n    }\n\n    private isDropZoneWithinThisGrid(draggingEvent: DraggingEvent): boolean {\n        const gridBodyCon = this.controllersService.getGridBodyController();\n        const gridGui = gridBodyCon.getGui();\n        const { dropZoneTarget } = draggingEvent;\n\n        return !gridGui.contains(dropZoneTarget);\n    }\n\n    private onEnterOrDragging(draggingEvent: DraggingEvent): void {\n        // this event is fired for enter and move\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_MOVE, draggingEvent);\n\n        this.lastDraggingEvent = draggingEvent;\n\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag) {\n            this.doManagedDrag(draggingEvent, pixel);\n        }\n\n        this.checkCenterForScrolling(pixel);\n    }\n\n    private doManagedDrag(draggingEvent: DraggingEvent, pixel: number): void {\n        let rowNodes: RowNode[];\n        const isFromThisGrid = this.isFromThisGrid(draggingEvent);\n\n        if (isFromThisGrid) {\n            rowNodes = [draggingEvent.dragItem.rowNode!];\n\n            if (this.isMultiRowDrag) {\n                rowNodes = [...this.selectionController.getSelectedNodes()].sort(\n                    (a, b) => this.getRowIndexNumber(a) - this.getRowIndexNumber(b)\n                );\n            }\n\n            draggingEvent.dragItem.rowNodes = rowNodes;\n        } else {\n            rowNodes = draggingEvent.dragItem.rowNodes!;\n        }\n\n        const managedDrag = this.gridOptionsWrapper.isRowDragManaged();\n\n        if (managedDrag && this.shouldPreventRowMove()) {\n            return;\n        }\n\n        if (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !isFromThisGrid) {\n            if (!this.isDropZoneWithinThisGrid(draggingEvent)) {\n                this.clientSideRowModel.highlightRowAtPixel(rowNodes[0], pixel);\n            }\n        } else {\n            this.moveRows(rowNodes, pixel);\n        }\n    }\n\n    private getRowIndexNumber(rowNode: RowNode): number {\n        return parseInt(last(rowNode.getRowIndexString().split('-')), 10);\n    }\n\n    private moveRowAndClearHighlight(draggingEvent: DraggingEvent): void {\n        const lastHighlightedRowNode = this.clientSideRowModel.getLastHighlightedRowNode();\n        const isBelow = lastHighlightedRowNode && lastHighlightedRowNode.highlighted === 'below';\n        const pixel = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const rowNodes = draggingEvent.dragItem.rowNodes;\n\n        let increment = isBelow ? 1 : 0;\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            rowNodes!.forEach(rowNode => {\n                if (rowNode.rowTop! < pixel) {\n                    increment -= 1;\n                }\n            });\n            this.moveRows(rowNodes!, pixel, increment);\n        } else {\n            const getRowNodeId = this.gridOptionsWrapper.getRowNodeIdFunc();\n\n            let addIndex = this.clientSideRowModel.getRowIndexAtPixel(pixel) + 1;\n\n            if (this.clientSideRowModel.getHighlightPosition(pixel) === 'above') {\n                addIndex--;\n            }\n\n            this.clientSideRowModel.updateRowData({\n                add: rowNodes!\n                    .map(node => node.data)\n                    .filter(data => !this.clientSideRowModel.getRowNode(\n                        getRowNodeId ? getRowNodeId(data) : data.id)\n                    ),\n                addIndex\n            });\n        }\n\n        this.clearRowHighlight();\n    }\n\n    private clearRowHighlight(): void {\n        this.clientSideRowModel.highlightRowAtPixel(null);\n    }\n\n    private moveRows(rowNodes: RowNode[], pixel: number, increment: number = 0): void {\n        const rowWasMoved = this.clientSideRowModel.ensureRowsAtPixel(rowNodes, pixel, increment);\n\n        if (rowWasMoved) {\n            this.focusController.clearFocusedCell();\n            if (this.rangeController) {\n                this.rangeController.removeAllCellRanges();\n            }\n        }\n    }\n\n    private checkCenterForScrolling(pixel: number): void {\n        // scroll if the mouse is within 50px of the grid edge\n        const gridBodyCon = this.controllersService.getGridBodyController();\n        const pixelRange = gridBodyCon.getScrollFeature().getVScrollPosition();\n\n        // console.log(`pixelRange = (${pixelRange.top}, ${pixelRange.bottom})`);\n\n        this.needToMoveUp = pixel < (pixelRange.top + 50);\n        this.needToMoveDown = pixel > (pixelRange.bottom - 50);\n\n        // console.log(`needToMoveUp = ${this.needToMoveUp} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n        // console.log(`needToMoveDown = ${this.needToMoveDown} = pixel < (pixelRange.top + 50) = ${pixel} < (${pixelRange.top} + 50)`);\n\n        if (this.needToMoveUp || this.needToMoveDown) {\n            this.ensureIntervalStarted();\n        } else {\n            this.ensureIntervalCleared();\n        }\n    }\n\n    private ensureIntervalStarted(): void {\n        if (this.movingIntervalId) { return; }\n\n        this.intervalCount = 0;\n        this.movingIntervalId = window.setInterval(this.moveInterval.bind(this), 100);\n\n    }\n\n    private ensureIntervalCleared(): void {\n        if (!exists(this.movingIntervalId)) { return; }\n\n        window.clearInterval(this.movingIntervalId);\n        this.movingIntervalId = null;\n    }\n\n    private moveInterval(): void {\n        // the amounts we move get bigger at each interval, so the speed accelerates, starting a bit slow\n        // and getting faster. this is to give smoother user experience. we max at 100px to limit the speed.\n        let pixelsToMove: number;\n\n        this.intervalCount++;\n        pixelsToMove = 10 + (this.intervalCount * 5);\n\n        if (pixelsToMove > 100) {\n            pixelsToMove = 100;\n        }\n\n        let pixelsMoved: number | null = null;\n\n        const gridBodyCon = this.controllersService.getGridBodyController();\n        if (this.needToMoveDown) {\n            pixelsMoved = gridBodyCon.scrollVertically(pixelsToMove);\n        } else if (this.needToMoveUp) {\n            pixelsMoved = gridBodyCon.scrollVertically(-pixelsToMove);\n        }\n\n        if (pixelsMoved !== 0) {\n            this.onDragging(this.lastDraggingEvent);\n        }\n    }\n\n    public addRowDropZone(params: RowDropZoneParams): void {\n        if (!params.getContainer()) {\n            doOnce(() => console.warn('AG Grid: addRowDropZone - A container target needs to be provided'), 'add-drop-zone-empty-target');\n            return;\n        }\n\n        if (this.dragAndDropService.findExternalZone(params)) {\n            console.warn('AG Grid: addRowDropZone - target already exists in the list of DropZones. Use `removeRowDropZone` before adding it again.');\n            return;\n        }\n\n        let processedParams: RowDropZoneParams = {\n            getContainer: params.getContainer\n        };\n\n        if ((params as any).fromGrid) {\n            (params as any).fromGrid = undefined;\n            processedParams = params;\n        } else {\n            if (params.onDragEnter) {\n                processedParams.onDragEnter = (e) => {\n                    params.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                };\n            }\n            if (params.onDragLeave) {\n                processedParams.onDragLeave = (e) => {\n                    params.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                };\n            }\n            if (params.onDragging) {\n                processedParams.onDragging = (e) => {\n                    params.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                };\n            }\n            if (params.onDragStop) {\n                processedParams.onDragStop = (e) => {\n                    params.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                };\n            }\n        }\n\n        this.dragAndDropService.addDropTarget({\n            isInterestedIn: (type: DragSourceType) => type === DragSourceType.RowDrag,\n            getIconName:() => DragAndDropService.ICON_MOVE,\n            external: true,\n            ...processedParams as any\n        });\n    }\n\n    public getRowDropZone(events: RowDropZoneEvents): RowDropZoneParams {\n        const getContainer = this.getContainer.bind(this);\n        const onDragEnter = this.onDragEnter.bind(this);\n        const onDragLeave = this.onDragLeave.bind(this);\n        const onDragging = this.onDragging.bind(this);\n        const onDragStop = this.onDragStop.bind(this);\n\n        if (!events) {\n            return { getContainer, onDragEnter, onDragLeave, onDragging, onDragStop, /* @private */ fromGrid: true } as RowDropZoneParams;\n        }\n\n        return {\n            getContainer,\n            onDragEnter: events.onDragEnter\n                ? ((e) => {\n                    onDragEnter(e);\n                    events.onDragEnter!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_ENTER, e as any));\n                })\n                : onDragEnter,\n            onDragLeave: events.onDragLeave\n                ? ((e) => {\n                    onDragLeave(e);\n                    events.onDragLeave!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_LEAVE, e as any));\n                })\n                : onDragLeave,\n            onDragging: events.onDragging\n                ? ((e) => {\n                    onDragging(e);\n                    events.onDragging!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_MOVE, e as any));\n                })\n                : onDragging,\n            onDragStop: events.onDragStop\n                ? ((e) => {\n                    onDragStop(e);\n                    events.onDragStop!(this.draggingToRowDragEvent(Events.EVENT_ROW_DRAG_END, e as any));\n                })\n                : onDragStop,\n            fromGrid: true /* @private */\n        } as RowDropZoneParams;\n    }\n\n    private draggingToRowDragEvent(type: string, draggingEvent: DraggingEvent): RowDragEvent {\n        const yNormalised = this.mouseEventService.getNormalisedPosition(draggingEvent).y;\n        const mouseIsPastLastRow = yNormalised > this.paginationProxy.getCurrentPageHeight();\n\n        let overIndex = -1;\n        let overNode: RowNode | null = null;\n\n        if (!mouseIsPastLastRow) {\n            overIndex = this.rowModel.getRowIndexAtPixel(yNormalised);\n            overNode = this.rowModel.getRow(overIndex);\n        }\n\n        let vDirectionString: string | null;\n\n        switch (draggingEvent.vDirection) {\n            case VerticalDirection.Down:\n                vDirectionString = 'down';\n                break;\n            case VerticalDirection.Up:\n                vDirectionString = 'up';\n                break;\n            default:\n                vDirectionString = null;\n                break;\n        }\n\n        const event: RowDragEvent = {\n            type: type,\n            api: this.gridOptionsWrapper.getApi()!,\n            columnApi: this.gridOptionsWrapper.getColumnApi()!,\n            event: draggingEvent.event,\n            node: draggingEvent.dragItem.rowNode!,\n            nodes: draggingEvent.dragItem.rowNodes!,\n            overIndex: overIndex,\n            overNode: overNode!,\n            y: yNormalised,\n            vDirection: vDirectionString!\n        };\n\n        return event;\n    }\n\n    private dispatchGridEvent(type: string, draggingEvent: DraggingEvent): void {\n        const event = this.draggingToRowDragEvent(type, draggingEvent);\n\n        this.eventService.dispatchEvent(event);\n    }\n\n    public onDragLeave(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_LEAVE, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (this.gridOptionsWrapper.isRowDragManaged()) {\n            this.clearRowHighlight();\n        }\n\n        if (this.isFromThisGrid(draggingEvent)) {\n            this.isMultiRowDrag = false;\n        }\n    }\n\n    public onDragStop(draggingEvent: DraggingEvent): void {\n        this.dispatchGridEvent(Events.EVENT_ROW_DRAG_END, draggingEvent);\n        this.stopDragging(draggingEvent);\n\n        if (\n            this.gridOptionsWrapper.isRowDragManaged() &&\n            (this.gridOptionsWrapper.isSuppressMoveWhenRowDragging() || !this.isFromThisGrid(draggingEvent)) &&\n            !this.isDropZoneWithinThisGrid(draggingEvent)\n        ) {\n            this.moveRowAndClearHighlight(draggingEvent);\n        }\n    }\n\n    private stopDragging(draggingEvent: DraggingEvent): void {\n        this.ensureIntervalCleared();\n\n        this.getRowNodes(draggingEvent).forEach(rowNode => {\n            rowNode.setDragging(false);\n        });\n    }\n}\n"]}