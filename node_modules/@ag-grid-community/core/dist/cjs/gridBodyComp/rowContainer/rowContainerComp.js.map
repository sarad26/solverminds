{"version":3,"sources":["../../src/ts/gridBodyComp/rowContainer/rowContainerComp.ts"],"names":[],"mappings":"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","file":"rowContainerComp.js","sourcesContent":["import { Component, elementGettingCreated } from \"../../widgets/component\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { Autowired, PostConstruct } from \"../../context/context\";\nimport {\n    ContainerCssClasses,\n    RowContainerController,\n    RowContainerNames,\n    RowContainerView,\n    ViewportCssClasses,\n    WrapperCssClasses\n} from \"./rowContainerController\";\nimport { ensureDomOrder, insertWithDomOrder } from \"../../utils/dom\";\nimport { GridOptionsWrapper } from \"../../gridOptionsWrapper\";\nimport { Events } from \"../../eventKeys\";\nimport { RowRenderer } from \"../../rendering/rowRenderer\";\nimport { RowComp } from \"../../rendering/row/rowComp\";\nimport { RowController } from \"../../rendering/row/rowController\";\nimport { Beans } from \"../../rendering/beans\";\nimport { Constants } from \"../../constants/constants\";\nimport { getAllValuesInObject } from \"../../utils/object\";\n\nfunction templateFactory(): string {\n    const name = elementGettingCreated.getAttribute('name') as RowContainerNames;\n\n    const containerClass = ContainerCssClasses.get(name);\n    const viewportClass = ViewportCssClasses.get(name);\n    const wrapperClass = WrapperCssClasses.get(name);\n\n    let res: string;\n\n    switch (name) {\n        case RowContainerNames.LEFT :\n        case RowContainerNames.RIGHT :\n        case RowContainerNames.FULL_WIDTH :\n        case RowContainerNames.TOP_LEFT :\n        case RowContainerNames.TOP_RIGHT :\n        case RowContainerNames.TOP_FULL_WITH :\n        case RowContainerNames.BOTTOM_LEFT :\n        case RowContainerNames.BOTTOM_RIGHT :\n        case RowContainerNames.BOTTOM_FULL_WITH :\n            res = /* html */\n            `<div class=\"${containerClass}\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>`;\n            break;\n\n        case RowContainerNames.CENTER :\n            res =  /* html */\n            `<div class=\"${wrapperClass}\" ref=\"eWrapper\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"${viewportClass}\" ref=\"eViewport\" role=\"presentation\">\n                    <div class=\"${containerClass}\" ref=\"eContainer\" role=\"rowgroup\" unselectable=\"on\"></div>\n                </div>\n            </div>`;\n            break;\n\n        case RowContainerNames.TOP_CENTER :\n        case RowContainerNames.BOTTOM_CENTER :\n            res = /* html */\n            `<div class=\"${viewportClass}\" ref=\"eViewport\" role=\"presentation\" unselectable=\"on\">\n                <div class=\"${containerClass}\" ref=\"eContainer\" role=\"presentation\" unselectable=\"on\"></div>\n            </div>`;\n            break;\n\n        default: return '';\n    }\n\n    return res;\n}\n\nexport class RowContainerComp extends Component {\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired(\"beans\") private beans: Beans;\n\n    @RefSelector('eViewport') private eViewport: HTMLElement;\n    @RefSelector('eContainer') private eContainer: HTMLElement;\n    @RefSelector('eWrapper') private eWrapper: HTMLElement;\n\n    private readonly name: RowContainerNames;\n\n    private renderedRows: {[id: string]: RowComp} = {};\n    private embedFullWidthRows: boolean;\n\n    // we ensure the rows are in the dom in the order in which they appear on screen when the\n    // user requests this via gridOptions.ensureDomOrder. this is typically used for screen readers.\n    private domOrder: boolean;\n    private lastPlacedElement: HTMLElement | null;\n\n    constructor() {\n        super(templateFactory());\n        this.name = elementGettingCreated.getAttribute('name')! as RowContainerNames;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.embedFullWidthRows = this.gridOptionsWrapper.isEmbedFullWidthRows();\n\n        const view: RowContainerView = {\n            setViewportHeight: height => this.eViewport.style.height = height,\n        };\n\n        const con = this.createManagedBean(new RowContainerController(this.name));\n        con.setView(view, this.eContainer, this.eViewport, this.eWrapper);\n\n        this.listenOnDomOrder();\n\n        this.stopHScrollOnPinnedRows();\n\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_ROWS_CHANGED, this.onDisplayedRowsChanged.bind(this));\n    }\n\n    private forContainers(names: RowContainerNames[], callback: (() => void)): void {\n        if (names.indexOf(this.name) >= 0) {\n            callback();\n        }\n    }\n\n    // when editing a pinned row, if the cell is half outside the scrollable area, the browser can\n    // scroll the column into view. we do not want this, the pinned sections should never scroll.\n    // so we listen to scrolls on these containers and reset the scroll if we find one.\n    private stopHScrollOnPinnedRows(): void {\n        this.forContainers([RowContainerNames.TOP_CENTER, RowContainerNames.BOTTOM_CENTER], () => {\n            const resetScrollLeft = () => this.eViewport.scrollLeft = 0;\n            this.addManagedListener(this.eViewport, 'scroll', resetScrollLeft);\n        });\n    }\n\n    private listenOnDomOrder(): void {\n        const listener = () => this.domOrder = this.gridOptionsWrapper.isEnsureDomOrder();\n        this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_DOM_LAYOUT, listener);\n        listener();\n    }\n\n    // this is repeated inside the controller, need to remove where this one is called from\n    public getViewportElement(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public clearLastPlacedElement(): void {\n        this.lastPlacedElement = null;\n    }\n\n    public appendRow(element: HTMLElement) {\n        if (this.domOrder) {\n            insertWithDomOrder(this.eContainer, element, this.lastPlacedElement);\n        } else {\n            this.eContainer.appendChild(element);\n        }\n        this.lastPlacedElement = element;\n    }\n\n    public ensureDomOrder(eRow: HTMLElement): void {\n        if (this.domOrder) {\n            ensureDomOrder(this.eContainer, eRow, this.lastPlacedElement);\n            this.lastPlacedElement = eRow;\n        }\n    }\n\n    public removeRow(eRow: HTMLElement): void {\n        this.eContainer.removeChild(eRow);\n    }\n\n    private onDisplayedRowsChanged(): void {\n        const fullWithContainer =\n            this.name === RowContainerNames.TOP_FULL_WITH\n            || this.name === RowContainerNames.BOTTOM_FULL_WITH\n            || this.name === RowContainerNames.FULL_WIDTH;\n\n        const oldRows = {...this.renderedRows};\n        this.renderedRows = {};\n\n        this.clearLastPlacedElement();\n\n        const processRow = (rowCon: RowController) => {\n            const instanceId = rowCon.getInstanceId();\n            const existingRowComp = oldRows[instanceId];\n            if (existingRowComp) {\n                this.renderedRows[instanceId] = existingRowComp;\n                delete oldRows[instanceId];\n                this.ensureDomOrder(existingRowComp.getGui());\n            } else {\n                const rowComp = this.newRowComp(rowCon);\n                this.renderedRows[instanceId] = rowComp;\n                this.appendRow(rowComp.getGui());\n            }\n        };\n\n        const doesRowMatch = (rowCon: RowController) => {\n            const fullWidthController = rowCon.isFullWidth();\n\n            const printLayout = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n\n            const embedFW = this.embedFullWidthRows || printLayout;\n\n            const match = fullWithContainer ?\n                !embedFW && fullWidthController\n                : embedFW || !fullWidthController;\n\n            return match;\n        };\n\n        const rowConsToRender = this.getRowCons();\n\n        rowConsToRender.filter(doesRowMatch).forEach(processRow);\n\n        getAllValuesInObject(oldRows).forEach(rowComp => this.removeRow(rowComp.getGui()));\n    }\n\n    private getRowCons(): RowController[] {\n        switch (this.name) {\n            case RowContainerNames.TOP_CENTER:\n            case RowContainerNames.TOP_LEFT:\n            case RowContainerNames.TOP_RIGHT:\n            case RowContainerNames.TOP_FULL_WITH:\n                return this.rowRenderer.getTopRowCons();\n\n            case RowContainerNames.BOTTOM_CENTER:\n            case RowContainerNames.BOTTOM_LEFT:\n            case RowContainerNames.BOTTOM_RIGHT:\n            case RowContainerNames.BOTTOM_FULL_WITH:\n                return this.rowRenderer.getBottomRowCons();\n\n            default:\n                return this.rowRenderer.getRowCons();\n        }\n    }\n\n    private newRowComp(rowCon: RowController): RowComp {\n        let pinned: string | null;\n        switch (this.name) {\n            case RowContainerNames.BOTTOM_LEFT:\n            case RowContainerNames.TOP_LEFT:\n            case RowContainerNames.LEFT:\n                pinned = Constants.PINNED_LEFT;\n                break;\n            case RowContainerNames.BOTTOM_RIGHT:\n            case RowContainerNames.TOP_RIGHT:\n            case RowContainerNames.RIGHT:\n                pinned = Constants.PINNED_RIGHT;\n                break;\n            default:\n                pinned = null;\n                break;\n        }\n        const res = new RowComp(rowCon, this, this.beans, pinned);\n        return res;\n    }\n\n}"]}