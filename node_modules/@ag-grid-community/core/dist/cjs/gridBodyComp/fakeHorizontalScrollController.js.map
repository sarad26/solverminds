{"version":3,"sources":["../../src/ts/gridBodyComp/fakeHorizontalScrollController.ts"],"names":[],"mappings":"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","file":"fakeHorizontalScrollController.js","sourcesContent":["import { BeanStub } from \"../context/beanStub\";\nimport { isBrowserIE, isInvisibleScrollbar } from \"../utils/browser\";\nimport { Autowired, PostConstruct } from \"../context/context\";\nimport { ScrollVisibleService } from \"./scrollVisibleService\";\nimport { Events } from \"../eventKeys\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { GridOptionsWrapper } from \"../gridOptionsWrapper\";\nimport { ControllersService } from \"../controllersService\";\n\nexport interface FakeHorizontalScrollView {\n    setHeight(height: number): void;\n    setViewportHeight(height: number): void;\n    setContainerHeight(height: number): void;\n    setRightSpacerFixedWidth(width: number): void;\n    setLeftSpacerFixedWidth(width: number): void;\n    setInvisibleStyles(isInvisible: boolean): void;\n    includeLeftSpacerScrollerCss(cssClass: string, include: boolean): void;\n    includeRightSpacerScrollerCss(cssClass: string, include: boolean): void;\n}\n\nexport class FakeHorizontalScrollController extends BeanStub {\n\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('controllersService') public controllersService: ControllersService;\n\n    private view: FakeHorizontalScrollView;\n\n    private enableRtl: boolean;\n    private eViewport: HTMLElement;\n    private eContainer: HTMLElement;\n\n    constructor() {\n        super();\n    }\n\n    public setView(view: FakeHorizontalScrollView, eViewport: HTMLElement, eContainer: HTMLElement): void {\n        this.view = view;\n        this.eViewport = eViewport;\n        this.eContainer = eContainer;\n\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.onScrollVisibilityChanged();\n\n        // When doing printing, this changes whether cols are pinned or not\n        const spacerWidthsListener = this.setFakeHScrollSpacerWidths.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, spacerWidthsListener);\n        this.addManagedListener(this.gridOptionsWrapper, GridOptionsWrapper.PROP_DOM_LAYOUT, spacerWidthsListener);\n        this.setFakeHScrollSpacerWidths();\n\n        this.controllersService.registerFakeHScrollCon(this);\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.enableRtl = this.gridOptionsWrapper.isEnableRtl();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.setScrollVisible();\n        this.setFakeHScrollSpacerWidths();\n    }\n\n    private setFakeHScrollSpacerWidths(): void {\n        const vScrollShowing = this.scrollVisibleService.isVerticalScrollShowing();\n\n        // we pad the right based on a) if cols are pinned to the right and\n        // b) if v scroll is showing on the right (normal position of scroll)\n        let rightSpacing = this.columnController.getDisplayedColumnsRightWidth();\n        const scrollOnRight = !this.enableRtl && vScrollShowing;\n        const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n\n        if (scrollOnRight) {\n            rightSpacing += scrollbarWidth;\n        }\n        this.view.setRightSpacerFixedWidth(rightSpacing);\n        this.view.includeRightSpacerScrollerCss('ag-scroller-corner', rightSpacing <= scrollbarWidth);\n\n        // we pad the left based on a) if cols are pinned to the left and\n        // b) if v scroll is showing on the left (happens in LTR layout only)\n        let leftSpacing = this.columnController.getDisplayedColumnsLeftWidth();\n        const scrollOnLeft = this.enableRtl && vScrollShowing;\n\n        if (scrollOnLeft) {\n            leftSpacing += scrollbarWidth;\n        }\n\n        this.view.setLeftSpacerFixedWidth(leftSpacing);\n        this.view.includeLeftSpacerScrollerCss('ag-scroller-corner', leftSpacing <= scrollbarWidth);\n    }\n\n    private setScrollVisible(): void {\n        const hScrollShowing = this.scrollVisibleService.isHorizontalScrollShowing();\n\n        const scrollbarInvisible = isInvisibleScrollbar();\n        const isSuppressHorizontalScroll = this.gridOptionsWrapper.isSuppressHorizontalScroll();\n        const scrollbarWidth = hScrollShowing ? (this.gridOptionsWrapper.getScrollbarWidth() || 0) : 0;\n        const adjustedScrollbarWidth = (scrollbarWidth === 0 && scrollbarInvisible) ? 15 : scrollbarWidth;\n        const scrollContainerSize = !isSuppressHorizontalScroll ? adjustedScrollbarWidth : 0;\n        const addIEPadding = isBrowserIE() && hScrollShowing;\n\n        this.view.setInvisibleStyles(scrollbarInvisible);\n        this.view.setHeight(scrollContainerSize);\n        // we have to add an extra pixel to the scroller viewport on IE because\n        // if the container has the same size as the scrollbar, the scroll button won't work\n        this.view.setViewportHeight(scrollContainerSize + (addIEPadding ? 1 : 0));\n        this.view.setContainerHeight(scrollContainerSize);\n    }\n\n    public getViewport(): HTMLElement {\n        return this.eViewport;\n    }\n\n    public getContainer(): HTMLElement {\n        return this.eContainer;\n    }\n}\n"]}