{"version":3,"sources":["../../src/ts/headerRendering/header/headerPosition.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,0DAAyD;AACzD,iDAAwD;AACxD,mDAAkD;AAGlD,kDAAiD;AAQjD;IAAyC,uCAAQ;IAAjD;;IAiDA,CAAC;IA5CU,wCAAU,GAAjB,UAAkB,aAA6B,EAAE,SAA6B;QAC1E,IAAI,UAAgC,CAAC;QACrC,IAAI,cAAoE,CAAC;QACzE,IAAI,YAA8D,CAAC;QAEnE,IAAI,aAAa,CAAC,MAAM,YAAY,yBAAW,EAAE;YAC7C,cAAc,GAAG,sBAAoB,SAAkB,CAAC;YACxD,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,MAAM,CAAE,CAAC;SAC7E;aAAM;YACH,YAAY,GAAG,oBAAkB,SAAkB,CAAC;YACpD,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC,aAAa,CAAC,MAAM,CAAE,CAAC;SAC3E;QAED,IAAI,UAAU,EAAE;YACZ,OAAO;gBACH,MAAM,EAAE,UAAU;gBAClB,cAAc,EAAE,aAAa,CAAC,cAAc;aAC/C,CAAC;SACL;IACL,CAAC;IAEM,uDAAyB,GAAhC,UAAiC,KAAa,EAAE,QAAyB;QACrE,IAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,CAAC;QACxE,IAAM,MAAM,GAAG,gBAAgB,CAAC,QAAQ,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAExF,IAAI,CAAC,MAAM,EAAE;YAAE,OAAO;SAAE;QAExB,IAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3F,IAAM,aAAa,GAAG,cAAe,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;QAC3D,IAAM,IAAI,GAAG,aAAa,IAAI,aAAa,CAAC,OAAO,EAAE,CAAC;QAEtD,IAAI,IAAI,IAAI,6BAAa,CAAC,YAAY,EAAE;YACpC,IAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC/E,OAAO;gBACH,cAAc,EAAE,KAAK;gBACrB,MAAM,EAAE,WAAY;aACvB,CAAC;SACL;QAED,OAAO;YACH,cAAc,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;YAC3C,MAAM,QAAA;SACT,CAAC;IACN,CAAC;IA9C8B;QAA9B,mBAAS,CAAC,kBAAkB,CAAC;iEAA4C;IACpC;QAArC,mBAAS,CAAC,yBAAyB,CAAC;wEAA0D;IAHtF,mBAAmB;QAD/B,cAAI,CAAC,qBAAqB,CAAC;OACf,mBAAmB,CAiD/B;IAAD,0BAAC;CAjDD,AAiDC,CAjDwC,mBAAQ,GAiDhD;AAjDY,kDAAmB","file":"headerPosition.js","sourcesContent":["import { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { Bean, Autowired } from \"../../context/context\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { ColumnController } from \"../../columnController/columnController\";\nimport { HeaderNavigationService } from \"./headerNavigationService\";\nimport { HeaderRowType } from \"../headerRowComp\";\n\nexport interface HeaderPosition {\n    headerRowIndex: number;\n    column: Column | ColumnGroup;\n}\n\n@Bean('headerPositionUtils')\nexport class HeaderPositionUtils extends BeanStub {\n\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('headerNavigationService') private headerNavigationService: HeaderNavigationService;\n\n    public findHeader(focusedHeader: HeaderPosition, direction: 'Before' | 'After'): HeaderPosition | undefined {\n        let nextColumn: Column | ColumnGroup;\n        let getGroupMethod: 'getDisplayedGroupBefore' | 'getDisplayedGroupAfter';\n        let getColMethod: 'getDisplayedColBefore' | 'getDisplayedColAfter';\n\n        if (focusedHeader.column instanceof ColumnGroup) {\n            getGroupMethod = `getDisplayedGroup${direction}` as any;\n            nextColumn = this.columnController[getGroupMethod](focusedHeader.column)!;\n        } else {\n            getColMethod = `getDisplayedCol${direction}` as any;\n            nextColumn = this.columnController[getColMethod](focusedHeader.column)!;\n        }\n\n        if (nextColumn) {\n            return {\n                column: nextColumn,\n                headerRowIndex: focusedHeader.headerRowIndex\n            };\n        }\n    }\n\n    public findColAtEdgeForHeaderRow(level: number, position: 'start' | 'end'): HeaderPosition | undefined {\n        const displayedColumns = this.columnController.getAllDisplayedColumns();\n        const column = displayedColumns[position === 'start' ? 0 : displayedColumns.length - 1];\n\n        if (!column) { return; }\n\n        const childContainer = this.headerNavigationService.getHeaderContainer(column.getPinned());\n        const headerRowComp = childContainer!.getRowComps()[level];\n        const type = headerRowComp && headerRowComp.getType();\n\n        if (type == HeaderRowType.COLUMN_GROUP) {\n            const columnGroup = this.columnController.getColumnGroupAtLevel(column, level);\n            return {\n                headerRowIndex: level,\n                column: columnGroup!\n            };\n        }\n\n        return {\n            headerRowIndex: !headerRowComp ? -1 : level,\n            column\n        };\n    }\n}\n"]}