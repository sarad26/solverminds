{"version":3,"sources":["../../src/ts/headerRendering/headerContainer.ts"],"names":[],"mappings":"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","file":"headerContainer.js","sourcesContent":["import { Autowired, PostConstruct, PreDestroy } from '../context/context';\nimport { ColumnController } from '../columnController/columnController';\nimport { Events } from '../events';\nimport { HeaderRowComp, HeaderRowType } from './headerRowComp';\nimport { BodyDropTarget } from './bodyDropTarget';\nimport { ScrollVisibleService } from '../gridBodyComp/scrollVisibleService';\nimport { Component } from '../widgets/component';\nimport { Constants } from '../constants/constants';\nimport { setFixedWidth } from '../utils/dom';\nimport { BeanStub } from \"../context/beanStub\";\nimport { NumberSequence } from \"../utils\";\n\nexport class HeaderContainer extends BeanStub {\n\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('scrollVisibleService') private scrollVisibleService: ScrollVisibleService;\n\n    private eContainer: HTMLElement;\n    private eViewport: HTMLElement | null;\n\n    private pinned: string | null;\n\n    private filtersRowComp: HeaderRowComp | undefined;\n    private columnsRowComp: HeaderRowComp | undefined;\n    private groupsRowComps: HeaderRowComp[] = [];\n\n    constructor(eContainer: HTMLElement, eViewport: HTMLElement | null, pinned: string | null) {\n        super();\n        this.eContainer = eContainer;\n        this.pinned = pinned;\n        this.eViewport = eViewport;\n    }\n\n    public forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void {\n        if (this.groupsRowComps) {\n            this.groupsRowComps.forEach(c => c.forEachHeaderElement(callback));\n        }\n        if (this.columnsRowComp) {\n            this.columnsRowComp.forEachHeaderElement(callback);\n        }\n        if (this.filtersRowComp) {\n            this.filtersRowComp.forEachHeaderElement(callback);\n        }\n    }\n\n    @PostConstruct\n    private init(): void {\n        // if value changes, then if not pivoting, we at least need to change the label eg from sum() to avg(),\n        // if pivoting, then the columns have changed\n        this.addManagedListener(this.eventService, Events.EVENT_GRID_COLUMNS_CHANGED, this.onGridColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLL_VISIBILITY_CHANGED, this.onScrollVisibilityChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_RESIZED, this.onColumnResized.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, this.onDisplayedColumnsChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SCROLLBAR_WIDTH_CHANGED, this.onScrollbarWidthChanged.bind(this));\n        this.setupDragAndDrop();\n    }\n\n    private onColumnResized(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private onDisplayedColumnsChanged(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private onScrollVisibilityChanged(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private onScrollbarWidthChanged(): void {\n        this.setWidthOfPinnedContainer();\n    }\n\n    private setWidthOfPinnedContainer(): void {\n        const pinningLeft = this.pinned === Constants.PINNED_LEFT;\n        const pinningRight = this.pinned === Constants.PINNED_RIGHT;\n        const controller = this.columnController;\n        const isRtl = this.gridOptionsWrapper.isEnableRtl();\n        const scrollbarWidth = this.gridOptionsWrapper.getScrollbarWidth();\n\n        if (pinningLeft || pinningRight) {\n            // size to fit all columns\n            let width = controller[pinningLeft ? 'getDisplayedColumnsLeftWidth' : 'getDisplayedColumnsRightWidth']();\n\n            // if there is a scroll showing (and taking up space, so Windows, and not iOS)\n            // in the body, then we add extra space to keep header aligned with the body,\n            // as body width fits the cols and the scrollbar\n            const addPaddingForScrollbar = this.scrollVisibleService.isVerticalScrollShowing() && ((isRtl && pinningLeft) || (!isRtl && pinningRight));\n\n            if (addPaddingForScrollbar) {\n                width += scrollbarWidth;\n            }\n\n            setFixedWidth(this.eContainer, width);\n        }\n    }\n\n    public getRowComps(): HeaderRowComp[] {\n        let res: HeaderRowComp[] = [];\n        if (this.groupsRowComps) {\n            res = res.concat(this.groupsRowComps);\n        }\n        if (this.columnsRowComp) {\n            res.push(this.columnsRowComp);\n        }\n        if (this.filtersRowComp) {\n            res.push(this.filtersRowComp);\n        }\n        return res;\n    }\n\n    // grid cols have changed - this also means the number of rows in the header can have\n    // changed. so we remove all the old rows and insert new ones for a complete refresh\n    private onGridColumnsChanged() {\n        this.refresh(true);\n    }\n\n    // we expose this for gridOptions.api.refreshHeader() to call\n    public refresh(keepColumns = false): void {\n        this.refreshRowComps(keepColumns);\n    }\n\n    private setupDragAndDrop(): void {\n        // center section has viewport, but pinned sections do not\n        const dropContainer = this.eViewport ? this.eViewport : this.eContainer;\n        const bodyDropTarget = new BodyDropTarget(this.pinned, dropContainer);\n        this.createManagedBean(bodyDropTarget);\n    }\n\n    @PreDestroy\n    private destroyRowComps(keepColumns = false): void {\n\n        this.groupsRowComps.forEach(this.destroyRowComp.bind(this));\n        this.groupsRowComps = [];\n\n        this.destroyRowComp(this.filtersRowComp);\n        this.filtersRowComp = undefined;\n\n        if (!keepColumns) {\n            this.destroyRowComp(this.columnsRowComp);\n            this.columnsRowComp = undefined;\n        }\n    }\n\n    private destroyRowComp(rowComp?: HeaderRowComp): void {\n        if (rowComp) {\n            this.destroyBean(rowComp);\n            this.eContainer.removeChild(rowComp.getGui());\n        }\n    }\n\n    private refreshRowComps(keepColumns = false): void {\n        const sequence = new NumberSequence();\n\n        const refreshColumnGroups = () => {\n            const groupRowCount = this.columnController.getHeaderRowCount() - 1;\n\n            this.groupsRowComps.forEach(this.destroyRowComp.bind(this));\n            this.groupsRowComps = [];\n\n            for (let i = 0; i < groupRowCount; i++) {\n                const rowComp = this.createBean(\n                    new HeaderRowComp(sequence.next(), HeaderRowType.COLUMN_GROUP, this.pinned));\n                this.groupsRowComps.push(rowComp);\n            }\n        };\n\n        const refreshColumns = () => {\n            const rowIndex = sequence.next();\n\n            if (this.columnsRowComp) {\n                const rowIndexMismatch = this.columnsRowComp.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    this.destroyRowComp(this.columnsRowComp);\n                    this.columnsRowComp = undefined;\n                }\n            }\n\n            if (!this.columnsRowComp) {\n                this.columnsRowComp = this.createBean(\n                    new HeaderRowComp(rowIndex, HeaderRowType.COLUMN, this.pinned));\n            }\n        };\n\n        const refreshFilters = () => {\n\n            const includeFloatingFilter = !this.columnController.isPivotMode() && this.columnController.hasFloatingFilters();\n\n            const destroyPreviousComp = () => {\n                this.destroyRowComp(this.filtersRowComp);\n                this.filtersRowComp = undefined;\n            };\n\n            if (!includeFloatingFilter) {\n                destroyPreviousComp();\n                return;\n            }\n\n            const rowIndex = sequence.next();\n\n            if (this.filtersRowComp) {\n                const rowIndexMismatch = this.filtersRowComp.getRowIndex() !== rowIndex;\n                if (!keepColumns || rowIndexMismatch) {\n                    destroyPreviousComp();\n                }\n            }\n\n            if (!this.filtersRowComp) {\n                this.filtersRowComp = this.createBean(\n                    new HeaderRowComp(rowIndex, HeaderRowType.FLOATING_FILTER, this.pinned));\n            }\n        };\n\n        refreshColumnGroups();\n        refreshColumns();\n        refreshFilters();\n\n        // this re-adds the this.columnsRowComp, which is fine, it just means the DOM will rearrange then,\n        // taking it out of the last position and re-inserting relative to the other rows.\n        this.getRowComps().forEach(rowComp => this.eContainer.appendChild(rowComp.getGui()));\n    }\n}\n"]}