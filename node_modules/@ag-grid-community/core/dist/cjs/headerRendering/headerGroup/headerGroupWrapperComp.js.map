{"version":3,"sources":["../../src/ts/headerRendering/headerGroup/headerGroupWrapperComp.ts"],"names":[],"mappings":"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","file":"headerGroupWrapperComp.js","sourcesContent":["import { ColGroupDef } from \"../../entities/colDef\";\nimport { Column } from \"../../entities/column\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { ColumnApi } from \"../../columnController/columnApi\";\nimport { Constants } from \"../../constants/constants\";\nimport { ColumnController, ColumnResizeSet } from \"../../columnController/columnController\";\nimport { HorizontalResizeService } from \"../horizontalResizeService\";\nimport { Autowired } from \"../../context/context\";\nimport { CssClassApplier } from \"../cssClassApplier\";\nimport {\n    DragAndDropService,\n    DragItem,\n    DragSource,\n    DragSourceType\n} from \"../../dragAndDrop/dragAndDropService\";\nimport { SetLeftFeature } from \"../../rendering/features/setLeftFeature\";\nimport { IHeaderGroupComp, IHeaderGroupParams } from \"./headerGroupComp\";\nimport { GridApi } from \"../../gridApi\";\nimport { UserComponentFactory } from \"../../components/framework/userComponentFactory\";\nimport { HoverFeature } from \"../hoverFeature\";\nimport { AbstractHeaderWrapper } from \"../header/abstractHeaderWrapper\";\nimport { HeaderRowComp } from \"../headerRowComp\";\nimport { Beans } from \"../../rendering/beans\";\nimport { OriginalColumnGroup } from \"../../entities/originalColumnGroup\";\nimport { setAriaExpanded } from \"../../utils/aria\";\nimport { removeFromArray } from \"../../utils/array\";\nimport { removeFromParent, addCssClass, removeCssClass, addOrRemoveCssClass } from \"../../utils/dom\";\nimport { KeyCode } from '../../constants/keyCode';\nimport { ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { escapeString } from \"../../utils/string\";\n\nexport class HeaderGroupWrapperComp extends AbstractHeaderWrapper {\n\n    private static TEMPLATE = /* html */\n        `<div class=\"ag-header-group-cell\" role=\"columnheader\" tabindex=\"-1\">\n            <div ref=\"agResize\" class=\"ag-header-cell-resize\" role=\"presentation\"></div>\n        </div>`;\n\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('horizontalResizeService') private horizontalResizeService: HorizontalResizeService;\n    @Autowired('dragAndDropService') private dragAndDropService: DragAndDropService;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n    @Autowired('beans') protected beans: Beans;\n    @Autowired('gridApi') private gridApi: GridApi;\n    @Autowired('columnApi') private columnApi: ColumnApi;\n\n    protected readonly column: ColumnGroup;\n    protected readonly pinned: string | null;\n\n    private eHeaderCellResize: HTMLElement;\n\n    private resizeCols: Column[];\n    private resizeStartWidth: number;\n    private resizeRatios: number[];\n\n    private resizeTakeFromCols: Column[] | null;\n    private resizeTakeFromStartWidth: number | null;\n    private resizeTakeFromRatios: number[] | null;\n    private expandable: boolean;\n\n    // the children can change, we keep destroy functions related to listening to the children here\n    private removeChildListenersFuncs: Function[] = [];\n\n    constructor(columnGroup: ColumnGroup, pinned: string | null) {\n        super(HeaderGroupWrapperComp.TEMPLATE);\n        this.column = columnGroup;\n        this.pinned = pinned;\n    }\n\n    protected postConstruct(): void {\n        super.postConstruct();\n\n        CssClassApplier.addHeaderClassesFromColDef(this.getComponentHolder(), this.getGui(), this.gridOptionsWrapper, null, this.column);\n\n        const displayName = this.columnController.getDisplayNameForColumnGroup(this.column, 'header');\n\n        this.appendHeaderGroupComp(displayName!);\n\n        this.setupResize();\n        this.addClasses();\n        this.setupWidth();\n        this.addAttributes();\n        this.setupMovingCss();\n        this.setupTooltip();\n        this.setupExpandable();\n\n        this.createManagedBean(new HoverFeature(this.column.getOriginalColumnGroup().getLeafColumns(), this.getGui()));\n        this.createManagedBean(new SetLeftFeature(this.column, this.getGui(), this.beans));\n    }\n\n    protected onFocusIn(e: FocusEvent) {\n        if (!this.getGui().contains(e.relatedTarget as HTMLElement)) {\n            const headerRow = this.getParentComponent() as HeaderRowComp;\n            this.beans.focusController.setFocusedHeader(\n                headerRow.getRowIndex(),\n                this.getColumn()\n            );\n        }\n    }\n\n    protected handleKeyDown(e: KeyboardEvent) {\n        const activeEl = document.activeElement;\n        const eGui = this.getGui();\n        const wrapperHasFocus = activeEl === eGui;\n\n        if (!this.expandable || !wrapperHasFocus) { return; }\n\n        if (e.keyCode === KeyCode.ENTER) {\n            const column = this.getColumn() as ColumnGroup;\n            const newExpandedValue = !column.isExpanded();\n\n            this.columnController.setColumnGroupOpened(column.getOriginalColumnGroup(), newExpandedValue, \"uiColumnExpanded\");\n        }\n    }\n\n    protected onTabKeyDown(): void { }\n\n    private setupExpandable(): void {\n        const column = this.getColumn() as ColumnGroup;\n        const originalColumnGroup = column.getOriginalColumnGroup();\n\n        this.refreshExpanded();\n\n        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDABLE_CHANGED, this.refreshExpanded.bind(this));\n        this.addManagedListener(originalColumnGroup, OriginalColumnGroup.EVENT_EXPANDED_CHANGED, this.refreshExpanded.bind(this));\n    }\n\n    private refreshExpanded(): void {\n        const column = this.getColumn() as ColumnGroup;\n        const eGui = this.getGui();\n\n        const expandable = column.isExpandable();\n        const expanded = column.isExpanded();\n\n        this.expandable = expandable;\n\n        if (!expandable) {\n            eGui.removeAttribute('aria-expanded');\n        } else {\n            setAriaExpanded(eGui, expanded);\n        }\n    }\n\n    private setupMovingCss(): void {\n        const originalColumnGroup = this.column.getOriginalColumnGroup();\n        const leafColumns = originalColumnGroup.getLeafColumns();\n\n        leafColumns.forEach(col => {\n            this.addManagedListener(col, Column.EVENT_MOVING_CHANGED, this.onColumnMovingChanged.bind(this));\n        });\n\n        this.onColumnMovingChanged();\n    }\n\n    public getComponentHolder(): ColGroupDef | null {\n        return this.column.getColGroupDef();\n    }\n\n    public getTooltipParams(): ITooltipParams {\n        const res = super.getTooltipParams();\n        res.location = 'headerGroup';\n\n        // this is wrong, but leaving it as i don't want to change code,\n        // but the ColumnGroup does not have a ColDef or a Column (although it does have GroupDef and ColumnGroup)\n        res.colDef = this.getComponentHolder();\n        res.column = this.getColumn();\n\n        return res;\n    }\n\n    private setupTooltip(): void {\n        const colGroupDef = this.getComponentHolder();\n        const tooltipText = colGroupDef && colGroupDef.headerTooltip;\n        if (tooltipText != null) {\n            this.setTooltip(escapeString(tooltipText));\n        }\n    }\n\n    private onColumnMovingChanged(): void {\n        // this function adds or removes the moving css, based on if the col is moving.\n        // this is what makes the header go dark when it is been moved (gives impression to\n        // user that the column was picked up).\n        addOrRemoveCssClass(this.getGui(), 'ag-header-cell-moving', this.column.isMoving());\n    }\n\n    private addAttributes(): void {\n        this.getGui().setAttribute(\"col-id\", this.column.getUniqueId());\n    }\n\n    private appendHeaderGroupComp(displayName: string): void {\n        const params: IHeaderGroupParams = {\n            displayName: displayName,\n            columnGroup: this.column,\n            setExpanded: (expanded: boolean) => {\n                this.columnController.setColumnGroupOpened(this.column.getOriginalColumnGroup(), expanded, \"gridInitializing\");\n            },\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            context: this.gridOptionsWrapper.getContext()\n        };\n\n        if (!displayName) {\n            let columnGroup = this.column;\n            const leafCols = columnGroup.getLeafColumns();\n\n            // find the top most column group that represents the same columns. so if we are dragging a group, we also\n            // want to visually show the parent groups dragging for the same column set. for example imaging 5 levels\n            // of grouping, with each group only containing the next group, and the last group containing three columns,\n            // then when you move any group (even the lowest level group) you are in-fact moving all the groups, as all\n            // the groups represent the same column set.\n            while (columnGroup.getParent() && columnGroup.getParent().getLeafColumns().length === leafCols.length) {\n                columnGroup = columnGroup.getParent();\n            }\n\n            const colGroupDef = columnGroup.getColGroupDef();\n\n            if (colGroupDef) {\n                displayName = colGroupDef.headerName!;\n            }\n\n            if (!displayName) {\n                displayName = leafCols ? this.columnController.getDisplayNameForColumn(leafCols[0], 'header', true)! : '';\n            }\n        }\n\n        const callback = this.afterHeaderCompCreated.bind(this, displayName);\n\n        this.userComponentFactory.newHeaderGroupComponent(params)!.then(callback);\n    }\n\n    private afterHeaderCompCreated(displayName: string, headerGroupComp: IHeaderGroupComp): void {\n        this.getGui().appendChild(headerGroupComp.getGui());\n        this.addDestroyFunc(() => {\n            this.getContext().destroyBean(headerGroupComp);\n        });\n\n        this.setupMove(headerGroupComp.getGui(), displayName);\n    }\n\n    private addClasses(): void {\n        // having different classes below allows the style to not have a bottom border\n        // on the group header, if no group is specified\n        // columnGroup.getColGroupDef\n        const style = this.column.isPadding() ? 'no' : 'with';\n\n        this.addCssClass(`ag-header-group-cell-${style}-group`);\n    }\n\n    private setupMove(eHeaderGroup: HTMLElement, displayName: string): void {\n        if (!eHeaderGroup) { return; }\n        if (this.isSuppressMoving()) { return; }\n\n        const allLeafColumns = this.column.getOriginalColumnGroup().getLeafColumns();\n        const dragSource: DragSource = {\n            type: DragSourceType.HeaderCell,\n            eElement: eHeaderGroup,\n            defaultIconName: DragAndDropService.ICON_HIDE,\n            dragItemName: displayName,\n            // we add in the original group leaf columns, so we move both visible and non-visible items\n            getDragItem: this.getDragItemForGroup.bind(this),\n            onDragStarted: () => allLeafColumns.forEach(col => col.setMoving(true, \"uiColumnDragged\")),\n            onDragStopped: () => allLeafColumns.forEach(col => col.setMoving(false, \"uiColumnDragged\"))\n        };\n\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(() => this.dragAndDropService.removeDragSource(dragSource));\n    }\n\n    // when moving the columns, we want to move all the columns (contained within the DragItem) in this group in one go,\n    // and in the order they are currently in the screen.\n    public getDragItemForGroup(): DragItem {\n        const allColumnsOriginalOrder = this.column.getOriginalColumnGroup().getLeafColumns();\n\n        // capture visible state, used when re-entering grid to dictate which columns should be visible\n        const visibleState: { [key: string]: boolean; } = {};\n        allColumnsOriginalOrder.forEach(column => visibleState[column.getId()] = column.isVisible());\n\n        const allColumnsCurrentOrder: Column[] = [];\n        this.columnController.getAllDisplayedColumns().forEach(column => {\n            if (allColumnsOriginalOrder.indexOf(column) >= 0) {\n                allColumnsCurrentOrder.push(column);\n                removeFromArray(allColumnsOriginalOrder, column);\n            }\n        });\n\n        // we are left with non-visible columns, stick these in at the end\n        allColumnsOriginalOrder.forEach(column => allColumnsCurrentOrder.push(column));\n\n        // create and return dragItem\n        return {\n            columns: allColumnsCurrentOrder,\n            visibleState: visibleState\n        };\n    }\n\n    private isSuppressMoving(): boolean {\n        // if any child is fixed, then don't allow moving\n        let childSuppressesMoving = false;\n        this.column.getLeafColumns().forEach((column: Column) => {\n            if (column.getColDef().suppressMovable || column.getColDef().lockPosition) {\n                childSuppressesMoving = true;\n            }\n        });\n\n        const result = childSuppressesMoving || this.gridOptionsWrapper.isSuppressMovableColumns();\n\n        return result;\n    }\n\n    private setupWidth(): void {\n        // we need to listen to changes in child columns, as they impact our width\n        this.addListenersToChildrenColumns();\n\n        // the children belonging to this group can change, so we need to add and remove listeners as they change\n        this.addManagedListener(this.column, ColumnGroup.EVENT_DISPLAYED_CHILDREN_CHANGED, this.onDisplayedChildrenChanged.bind(this));\n\n        this.onWidthChanged();\n\n        // the child listeners are not tied to this components life-cycle, as children can get added and removed\n        // to the group - hence they are on a different life-cycle. so we must make sure the existing children\n        // listeners are removed when we finally get destroyed\n        this.addDestroyFunc(this.removeListenersOnChildrenColumns.bind(this));\n    }\n\n    private onDisplayedChildrenChanged(): void {\n        this.addListenersToChildrenColumns();\n        this.onWidthChanged();\n    }\n\n    private addListenersToChildrenColumns(): void {\n        // first destroy any old listeners\n        this.removeListenersOnChildrenColumns();\n\n        // now add new listeners to the new set of children\n        const widthChangedListener = this.onWidthChanged.bind(this);\n        this.column.getLeafColumns().forEach(column => {\n            column.addEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n            column.addEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            this.removeChildListenersFuncs.push(() => {\n                column.removeEventListener(Column.EVENT_WIDTH_CHANGED, widthChangedListener);\n                column.removeEventListener(Column.EVENT_VISIBLE_CHANGED, widthChangedListener);\n            });\n        });\n    }\n\n    private removeListenersOnChildrenColumns(): void {\n        this.removeChildListenersFuncs.forEach(func => func());\n        this.removeChildListenersFuncs = [];\n    }\n\n    private onWidthChanged(): void {\n        this.getGui().style.width = this.column.getActualWidth() + 'px';\n    }\n\n    private setupResize(): void {\n        this.eHeaderCellResize = this.getRefElement('agResize');\n\n        if (!this.column.isResizable()) {\n            removeFromParent(this.eHeaderCellResize);\n            return;\n        }\n\n        const finishedWithResizeFunc = this.horizontalResizeService.addResizeBar({\n            eResizeBar: this.eHeaderCellResize,\n            onResizeStart: this.onResizeStart.bind(this),\n            onResizing: this.onResizing.bind(this, false),\n            onResizeEnd: this.onResizing.bind(this, true)\n        });\n\n        this.addDestroyFunc(finishedWithResizeFunc);\n\n        if (!this.gridOptionsWrapper.isSuppressAutoSize()) {\n            const skipHeaderOnAutoSize = this.gridOptionsWrapper.isSkipHeaderOnAutoSize();\n\n            this.eHeaderCellResize.addEventListener('dblclick', (event: MouseEvent) => {\n                // get list of all the column keys we are responsible for\n                const keys: string[] = [];\n                this.column.getDisplayedLeafColumns().forEach((column: Column) => {\n                    // not all cols in the group may be participating with auto-resize\n                    if (!column.getColDef().suppressAutoSize) {\n                        keys.push(column.getColId());\n                    }\n                });\n\n                if (keys.length > 0) {\n                    this.columnController.autoSizeColumns(keys, skipHeaderOnAutoSize, \"uiColumnResized\");\n                }\n            });\n        }\n    }\n\n    public onResizeStart(shiftKey: boolean): void {\n        const leafCols = this.column.getDisplayedLeafColumns();\n        this.resizeCols = leafCols.filter(col => col.isResizable());\n        this.resizeStartWidth = 0;\n        this.resizeCols.forEach(col => this.resizeStartWidth += col.getActualWidth());\n        this.resizeRatios = [];\n        this.resizeCols.forEach(col => this.resizeRatios.push(col.getActualWidth() / this.resizeStartWidth));\n\n        let takeFromGroup: ColumnGroup | null = null;\n\n        if (shiftKey) {\n            takeFromGroup = this.columnController.getDisplayedGroupAfter(this.column);\n        }\n\n        if (takeFromGroup) {\n            const takeFromLeafCols = takeFromGroup.getDisplayedLeafColumns();\n\n            this.resizeTakeFromCols = takeFromLeafCols.filter(col => col.isResizable());\n\n            this.resizeTakeFromStartWidth = 0;\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromStartWidth! += col.getActualWidth());\n            this.resizeTakeFromRatios = [];\n            this.resizeTakeFromCols.forEach(col => this.resizeTakeFromRatios!.push(col.getActualWidth() / this.resizeTakeFromStartWidth!));\n        } else {\n            this.resizeTakeFromCols = null;\n            this.resizeTakeFromStartWidth = null;\n            this.resizeTakeFromRatios = null;\n        }\n\n        addCssClass(this.getGui(), 'ag-column-resizing');\n\n    }\n\n    public onResizing(finished: boolean, resizeAmount: any): void {\n        const resizeSets: ColumnResizeSet[] = [];\n        const resizeAmountNormalised = this.normaliseDragChange(resizeAmount);\n\n        resizeSets.push({\n            columns: this.resizeCols,\n            ratios: this.resizeRatios,\n            width: this.resizeStartWidth + resizeAmountNormalised\n        });\n\n        if (this.resizeTakeFromCols) {\n            resizeSets.push({\n                columns: this.resizeTakeFromCols,\n                ratios: this.resizeTakeFromRatios!,\n                width: this.resizeTakeFromStartWidth! - resizeAmountNormalised\n            });\n        }\n\n        this.columnController.resizeColumnSets(resizeSets, finished, 'uiColumnDragged');\n\n        if (finished) {\n            removeCssClass(this.getGui(), 'ag-column-resizing');\n        }\n    }\n\n    // optionally inverts the drag, depending on pinned and RTL\n    // note - this method is duplicated in RenderedHeaderCell - should refactor out?\n    private normaliseDragChange(dragChange: number): number {\n        let result = dragChange;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            // for RTL, dragging left makes the col bigger, except when pinning left\n            if (this.pinned !== Constants.PINNED_LEFT) {\n                result *= -1;\n            }\n        } else if (this.pinned === Constants.PINNED_RIGHT) {\n            // for LTR (ie normal), dragging left makes the col smaller, except when pinning right\n            result *= -1;\n        }\n\n        return result;\n    }\n}\n"]}