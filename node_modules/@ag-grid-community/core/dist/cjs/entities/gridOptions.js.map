{"version":3,"sources":["../../src/ts/entities/gridOptions.ts"],"names":[],"mappings":";;;;;;;;AA2xBA,IAAY,mBAGX;AAHD,WAAY,mBAAmB;IAC3B,oCAAa,CAAA;IACb,0CAAmB,CAAA;AACvB,CAAC,EAHW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAG9B","file":"gridOptions.js","sourcesContent":["/************************************************************************************************\n * If you change the GridOptions interface, you must also update PropertyKeys to be consistent. *\n ************************************************************************************************/\nimport { RowNode } from \"./rowNode\";\nimport { GridApi } from \"../gridApi\";\nimport { ColumnApi } from \"../columnController/columnApi\";\nimport { Column } from \"./column\";\nimport { IViewportDatasource } from \"../interfaces/iViewportDatasource\";\nimport { ICellRenderer, ICellRendererComp, ICellRendererFunc } from \"../rendering/cellRenderers/iCellRenderer\";\nimport { ColDef, ColGroupDef, IAggFunc, SuppressKeyboardEventParams } from \"./colDef\";\nimport { IDatasource } from \"../interfaces/iDatasource\";\nimport { CellPosition } from \"./cellPosition\";\nimport { IServerSideDatasource } from \"../interfaces/iServerSideDatasource\";\nimport { CsvExportParams, ProcessCellForExportParams, ProcessHeaderForExportParams } from \"../interfaces/exportParams\";\nimport {\n    AsyncTransactionsFlushed,\n    BodyScrollEvent,\n    CellClickedEvent,\n    CellContextMenuEvent,\n    CellDoubleClickedEvent,\n    CellEditingStartedEvent,\n    CellEditingStoppedEvent,\n    CellFocusedEvent,\n    CellKeyDownEvent,\n    CellKeyPressEvent,\n    CellMouseDownEvent,\n    CellMouseOutEvent,\n    CellMouseOverEvent,\n    CellValueChangedEvent,\n    ChartCreated,\n    ChartDestroyed,\n    ChartOptionsChanged,\n    ChartRangeSelectionChanged,\n    ColumnAggFuncChangeRequestEvent,\n    ColumnEverythingChangedEvent,\n    ColumnGroupOpenedEvent,\n    ColumnMovedEvent,\n    ColumnPinnedEvent,\n    ColumnPivotChangedEvent,\n    ColumnPivotChangeRequestEvent,\n    ColumnPivotModeChangedEvent,\n    ColumnResizedEvent,\n    ColumnRowGroupChangedEvent,\n    ColumnRowGroupChangeRequestEvent,\n    ColumnValueChangedEvent,\n    ColumnValueChangeRequestEvent,\n    ColumnVisibleEvent,\n    ComponentStateChangedEvent,\n    DisplayedColumnsChangedEvent,\n    DragStartedEvent,\n    DragStoppedEvent,\n    ExpandCollapseAllEvent,\n    FillEndEvent,\n    FillStartEvent,\n    FilterChangedEvent,\n    FilterModifiedEvent,\n    FirstDataRenderedEvent,\n    GridColumnsChangedEvent,\n    GridReadyEvent,\n    ModelUpdatedEvent,\n    NewColumnsLoadedEvent,\n    PaginationChangedEvent,\n    PasteEndEvent,\n    PasteStartEvent,\n    PinnedRowDataChangedEvent,\n    RangeSelectionChangedEvent,\n    RowClickedEvent,\n    RowDataChangedEvent,\n    RowDataUpdatedEvent,\n    RowDoubleClickedEvent,\n    RowDragEvent,\n    RowEditingStartedEvent,\n    RowEditingStoppedEvent,\n    RowGroupOpenedEvent,\n    RowSelectedEvent,\n    RowValueChangedEvent,\n    SelectionChangedEvent,\n    SortChangedEvent,\n    ToolPanelVisibleChangedEvent,\n    ViewportChangedEvent,\n    VirtualColumnsChangedEvent,\n    VirtualRowRemovedEvent\n} from \"../events\";\nimport { IComponent } from \"../interfaces/iComponent\";\nimport { AgGridRegisteredComponentInput } from \"../components/framework/userComponentRegistry\";\nimport { ILoadingOverlayComp } from \"../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayComp } from \"../rendering/overlays/noRowsOverlayComponent\";\nimport { StatusPanelDef } from \"../interfaces/iStatusPanel\";\nimport { SideBarDef } from \"./sideBar\";\nimport { ChartMenuOptions, ChartOptions, ChartType } from \"../interfaces/iChartOptions\";\nimport { AgChartOptions, AgChartTheme, AgChartThemeOverrides } from \"../interfaces/iAgChartOptions\";\nimport { ServerSideTransaction } from \"../interfaces/serverSideTransaction\";\nimport { HeaderPosition } from \"../headerRendering/header/headerPosition\";\nimport { ExcelExportParams, ExcelStyle } from \"../interfaces/iExcelCreator\";\n\nexport interface GridOptions {\n    /*******************************************************************************************************\n     * If you change the properties on this interface, you must also update PropertyKeys to be consistent. *\n     *******************************************************************************************************/\n\n    // set once in init, can never change\n    suppressBrowserResizeObserver?: boolean;\n    rowDragManaged?: boolean;\n    suppressRowDrag?: boolean;\n    suppressMoveWhenRowDragging?: boolean;\n    enableMultiRowDragging?: boolean;\n    ensureDomOrder?: boolean;\n    suppressAggFilteredOnly?: boolean;\n    showOpenedGroup?: boolean;\n    /** @deprecated */\n    deltaRowDataMode?: boolean;\n    /** @deprecated */\n    deltaColumnMode?: boolean;\n    applyColumnDefOrder?: boolean;\n    immutableData?: boolean;\n    /** @deprecated */\n    immutableColumns?: boolean;\n    scrollbarWidth?: number;\n    suppressRowClickSelection?: boolean;\n    suppressRowHoverHighlight?: boolean;\n    suppressCellSelection?: boolean;\n    suppressClearOnFillReduction?: boolean;\n    suppressMaintainUnsortedOrder?: boolean;\n    sortingOrder?: (string | null)[];\n    suppressMultiSort?: boolean;\n    multiSortKey?: string;\n    accentedSort?: boolean;\n    deltaSort?: boolean;\n    suppressHorizontalScroll?: boolean;\n    alwaysShowHorizontalScroll?: boolean;\n    alwaysShowVerticalScroll?: boolean;\n    debounceVerticalScrollbar?: boolean;\n    unSortIcon?: boolean;\n    rowBuffer?: number;\n    tooltipShowDelay?: number;\n    tooltipMouseTrack?: boolean;\n    enableRtl?: boolean;\n    enableBrowserTooltips?: boolean;\n    colResizeDefault?: string;\n    enableCellExpressions?: boolean;\n    enableCellTextSelection?: boolean;\n    enableGroupEdit?: boolean;\n    enterMovesDownAfterEdit?: boolean;\n    enterMovesDown?: boolean;\n    suppressMiddleClickScrolls?: boolean;\n    preventDefaultOnContextMenu?: boolean;\n    suppressPreventDefaultOnMouseWheel?: boolean;\n    suppressScrollOnNewData?: boolean;\n    suppressMenuHide?: boolean;\n    singleClickEdit?: boolean;\n    suppressClickEdit?: boolean;\n    tabIndex?: number;\n\n    /** Allows user to suppress certain keyboard events */\n    suppressKeyboardEvent?: (params: SuppressKeyboardEventParams) => boolean;\n\n    /** @deprecated Use stopEditingWhenCellsLoseFocus instead */\n    stopEditingWhenGridLosesFocus?: boolean;\n    stopEditingWhenCellsLoseFocus?: boolean;\n\n    debug?: boolean;\n    icons?: any; // should be typed\n    angularCompileRows?: boolean;\n    angularCompileFilters?: boolean;\n\n    suppressLoadingOverlay?: boolean;\n    suppressNoRowsOverlay?: boolean;\n    suppressAutoSize?: boolean;\n    autoSizePadding?: number;\n    skipHeaderOnAutoSize?: boolean;\n    animateRows?: boolean;\n    suppressColumnMoveAnimation?: boolean;\n    suppressMovableColumns?: boolean;\n    suppressDragLeaveHidesColumns?: boolean;\n    suppressMakeColumnVisibleAfterUnGroup?: boolean;\n    suppressParentsInRowNodes?: boolean;\n    suppressFieldDotNotation?: boolean;\n    suppressCopyRowsToClipboard?: boolean;\n    copyHeadersToClipboard?: boolean;\n    clipboardDeliminator?: string;\n    suppressClipboardPaste?: boolean;\n    suppressClipboardApi?: boolean;\n    suppressLastEmptyLineOnPaste?: boolean;\n    suppressAggFuncInHeader?: boolean;\n    suppressAggAtRootLevel?: boolean;\n    suppressFocusAfterRefresh?: boolean;\n    rowModelType?: string;\n    pivotMode?: boolean;\n    pivotColumnGroupTotals?: string;\n    pivotRowTotals?: string;\n    suppressExpandablePivotGroups?: boolean;\n\n    suppressEnterpriseResetOnNewColumns?: boolean;\n    // enterprise only\n    enableRangeSelection?: boolean;\n    enableRangeHandle?: boolean;\n    enableFillHandle?: boolean;\n    fillHandleDirection?: string;\n    suppressMultiRangeSelection?: boolean;\n    rowGroupPanelShow?: string;\n    pivotPanelShow?: string;\n    suppressContextMenu?: boolean;\n    allowContextMenuWithControlKey?: boolean;\n\n    /** @deprecated - no longer needed, transaction updates keep group state */\n    rememberGroupStateWhenNewData?: boolean;\n    suppressModelUpdateAfterUpdateTransaction?: boolean;\n    viewportRowModelPageSize?: number;\n    viewportRowModelBufferSize?: number;\n    enableCellChangeFlash?: boolean;\n    cellFlashDelay?: number;\n    cellFadeDelay?: number;\n    allowShowChangeAfterFilter?: boolean;\n    quickFilterText?: string;\n    cacheQuickFilter?: boolean;\n    aggFuncs?: { [key: string]: IAggFunc; };\n    suppressColumnVirtualisation?: boolean;\n    functionsReadOnly?: boolean;\n    functionsPassive?: boolean;\n    maxConcurrentDatasourceRequests?: number;\n    maxBlocksInCache?: number;\n    purgeClosedRowNodes?: boolean;\n    domLayout?: string;\n    suppressChangeDetection?: boolean;\n    aggregateOnlyChangedColumns?: boolean;\n    valueCache?: boolean;\n    valueCacheNeverExpires?: boolean;\n    batchUpdateWaitMillis?: number;\n    asyncTransactionWaitMillis?: number;\n    suppressRowTransform?: boolean;\n    /** @deprecated */\n    suppressSetColumnStateEvents?: boolean;\n    /** @deprecated */\n    suppressColumnStateEvents?: boolean;\n    allowDragFromColumnsToolPanel?: boolean;\n    suppressMaxRenderedRowRestriction?: boolean;\n    excludeChildrenWhenTreeDataFiltering?: boolean;\n    undoRedoCellEditing?: boolean;\n    undoRedoCellEditingLimit?: number;\n\n    cacheOverflowSize?: number;\n    infiniteInitialRowCount?: number;\n    paginationPageSize?: number;\n    cacheBlockSize?: number;\n    blockLoadDebounceMillis?: number;\n    paginationAutoPageSize?: boolean;\n    suppressPaginationPanel?: boolean;\n\n    pagination?: boolean;\n    paginateChildRows?: boolean;\n    editType?: string;\n    suppressTouch?: boolean;\n    suppressAsyncEvents?: boolean;\n\n    embedFullWidthRows?: boolean;\n    /** @deprecated */\n    deprecatedEmbedFullWidthRows?: boolean;\n\n    excelStyles?: ExcelStyle[];\n    /** @deprecated Use floatingFilter on the colDef instead */\n    floatingFilter?: boolean;\n    suppressExcelExport?: boolean;\n    suppressCsvExport?: boolean;\n\n    // these should really be deprecated, as the user should be using the default\n    // column definitions for specifying column defaults.\n    colWidth?: number;\n    minColWidth?: number;\n    maxColWidth?: number;\n\n    suppressPropertyNamesCheck?: boolean;\n    serverSideSortingAlwaysResets?: boolean;\n    serverSideFilteringAlwaysResets?: boolean;\n    serverSideStoreType?: ServerSideStoreType;\n\n    getServerSideStoreParams?: (params: GetServerSideStoreParamsParams) => ServerSideStoreParams;\n    isServerSideGroupOpenByDefault?: (params: IsServerSideGroupOpenByDefaultParams) => boolean;\n    isGroupOpenByDefault?: (params: IsGroupOpenByDefaultParams) => boolean;\n\n    statusBar?: {\n        statusPanels: StatusPanelDef[];\n    };\n\n    // just set once\n    localeText?: any;\n    localeTextFunc?: (key: string, defaultValue: string) => string;\n    suppressAnimationFrame?: boolean;\n    defaultColGroupDef?: ColGroupDef;\n    defaultColDef?: ColDef;\n\n    /** @deprecated Use defaultCsvExportParams or defaultExcelExportParams */\n    defaultExportParams?: CsvExportParams | ExcelExportParams;\n    defaultCsvExportParams?: CsvExportParams;\n    defaultExcelExportParams?: ExcelExportParams;\n\n    pivotSuppressAutoColumn?: boolean;\n    groupSuppressAutoColumn?: boolean;\n    groupSelectsChildren?: boolean;\n    groupSelectsFiltered?: boolean;\n    groupIncludeFooter?: boolean;\n    groupIncludeTotalFooter?: boolean;\n    groupUseEntireRow?: boolean;\n    groupRemoveSingleChildren?: boolean;\n    groupRemoveLowestSingleChildren?: boolean;\n    groupHideOpenParents?: boolean;\n    groupMultiAutoColumn?: boolean;\n    groupSuppressBlankHeader?: boolean;\n    autoGroupColumnDef?: ColDef;\n    enableOldSetFilterModel?: boolean;\n    enableCharts?: boolean;\n\n    // changeable, but no immediate impact\n    context?: any;\n    rowStyle?: any;\n    rowClass?: string | string[];\n    groupDefaultExpanded?: number;\n    alignedGrids?: GridOptions[];\n\n    rowSelection?: string;\n    suppressRowDeselection?: boolean;\n\n    /** @deprecated - rowDeselection is now true by default and should be suppressed by using suppressRowDeselection */\n    rowDeselection?: boolean;\n\n    rowMultiSelectWithClick?: boolean;\n    isRowSelectable?: IsRowSelectable;\n    overlayLoadingTemplate?: string;\n    overlayNoRowsTemplate?: string;\n    rowHeight?: number;\n    detailRowHeight?: number;\n    popupParent?: HTMLElement;\n\n    masterDetail?: boolean;\n    keepDetailRows?: boolean;\n    keepDetailRowsCount?: number;\n    isRowMaster?: IsRowMaster;\n    detailCellRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    detailCellRendererFramework?: any;\n    detailCellRendererParams?: any;\n    detailRowAutoHeight?: boolean;\n\n    // changeable with impact\n    rowData?: any[];\n    pinnedTopRowData?: any[];\n    pinnedBottomRowData?: any[];\n    sideBar?: SideBarDef | string | boolean | null;\n    columnDefs?: (ColDef | ColGroupDef)[];\n    columnTypes?: { [key: string]: ColDef; };\n    datasource?: IDatasource;\n    viewportDatasource?: IViewportDatasource;\n    serverSideDatasource?: IServerSideDatasource;\n\n    // in properties\n    headerHeight?: number;\n    pivotHeaderHeight?: number;\n    groupHeaderHeight?: number;\n    pivotGroupHeaderHeight?: number;\n    floatingFiltersHeight?: number;\n\n    /******************************************************************************************************\n     * If you change the callbacks on this interface, you must also update PropertyKeys to be consistent. *\n     ******************************************************************************************************/\n\n    // callbacks\n    paginationNumberFormatter?: (params: PaginationNumberFormatterParams) => string;\n    postProcessPopup?: (params: PostProcessPopupParams) => void;\n    frameworkComponents?: { [p: string]: { new(): any; }; } | any;\n    components?: { [p: string]: AgGridRegisteredComponentInput<IComponent<any>>; };\n    groupRowRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    groupRowRendererFramework?: any;\n    groupRowRendererParams?: any;\n    /** @deprecated - this is now groupRowRendererParams.innerRenderer */\n    groupRowInnerRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    /** @deprecated - this is now groupRowRendererParams.innerRendererFramework */\n    groupRowInnerRendererFramework?: any;\n    createChartContainer?: (params: ChartRef) => void;\n    fillOperation?: (params: FillOperationParams) => any;\n\n    isExternalFilterPresent?(): boolean;\n    doesExternalFilterPass?(node: RowNode): boolean;\n\n    getRowStyle?: Function;\n    getRowClass?: (params: any) => (string | string[]);\n    rowClassRules?: { [cssClassName: string]: (((params: any) => boolean) | string); };\n    getRowHeight?: Function;\n    sendToClipboard?: (params: any) => void;\n    processDataFromClipboard?: (params: ProcessDataFromClipboardParams) => string[][] | null;\n\n    navigateToNextHeader?: (params: NavigateToNextHeaderParams) => HeaderPosition;\n    tabToNextHeader?: (params: TabToNextHeaderParams) => HeaderPosition;\n\n    navigateToNextCell?: (params: NavigateToNextCellParams) => CellPosition;\n    tabToNextCell?: (params: TabToNextCellParams) => CellPosition;\n\n    getDocument?: () => Document;\n    defaultGroupSortComparator?: (nodeA: RowNode, nodeB: RowNode) => number;\n\n    loadingCellRenderer?: { new(): ICellRenderer; } | string;\n    loadingCellRendererFramework?: any;\n    loadingCellRendererParams?: any;\n\n    loadingOverlayComponent?: { new(): ILoadingOverlayComp; } | string;\n    loadingOverlayComponentFramework?: any;\n    loadingOverlayComponentParams?: any;\n\n    noRowsOverlayComponent?: { new(): INoRowsOverlayComp; } | string;\n    noRowsOverlayComponentFramework?: any;\n    noRowsOverlayComponentParams?: any;\n\n    fullWidthCellRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    fullWidthCellRendererFramework?: any;\n    fullWidthCellRendererParams?: any;\n\n    isFullWidthCell?(rowNode: RowNode): boolean;\n\n    groupRowAggNodes?(nodes: RowNode[]): any;\n\n    getBusinessKeyForNode?(node: RowNode): string;\n\n    getDataPath?: GetDataPath;\n    treeData?: boolean;\n    isServerSideGroup?: IsServerSideGroup;\n    isApplyServerSideTransaction?: IsApplyServerSideTransaction;\n    getServerSideGroupKey?: GetServerSideGroupKey;\n    getContextMenuItems?: GetContextMenuItems;\n    getMainMenuItems?: GetMainMenuItems;\n    getChartToolbarItems?: GetChartToolbarItems;\n    getRowNodeId?: GetRowNodeIdFunc;\n\n    getChildCount?(dataItem: any): number;\n\n    processRowPostCreate?(params: ProcessRowParams): void;\n\n    processCellForClipboard?(params: ProcessCellForExportParams): any;\n\n    processHeaderForClipboard?(params: ProcessHeaderForExportParams): any;\n\n    processCellFromClipboard?(params: ProcessCellForExportParams): any;\n\n    processSecondaryColDef?(colDef: ColDef): void;\n\n    processSecondaryColGroupDef?(colGroupDef: ColGroupDef): void;\n\n    postSort?(nodes: RowNode[]): void;\n\n    chartThemes?: string[];\n\n    customChartThemes?: { [name: string]: AgChartTheme };\n\n    chartThemeOverrides?: AgChartThemeOverrides;\n\n    /** @deprecated */\n    processChartOptions?(params: ProcessChartOptionsParams): ChartOptions<any>;\n\n    /**********************************************************************************************************\n     * If you change the events on this interface, you do *not* need to update PropertyKeys to be consistent, *\n     * as event callbacks are automatically generated.                                                        *\n     **********************************************************************************************************/\n\n    // events\n    onColumnEverythingChanged?(event: ColumnEverythingChangedEvent): void;\n\n    onToolPanelVisibleChanged?(event: ToolPanelVisibleChangedEvent): void;\n\n    onNewColumnsLoaded?(event: NewColumnsLoadedEvent): void;\n\n    onColumnPivotModeChanged?(event: ColumnPivotModeChangedEvent): void;\n\n    onColumnRowGroupChanged?(event: ColumnRowGroupChangedEvent): void;\n\n    onColumnPivotChanged?(event: ColumnPivotChangedEvent): void;\n\n    onGridColumnsChanged?(event: GridColumnsChangedEvent): void;\n\n    onColumnValueChanged?(event: ColumnValueChangedEvent): void;\n\n    onColumnMoved?(event: ColumnMovedEvent): void;\n\n    onColumnVisible?(event: ColumnVisibleEvent): void;\n\n    onColumnPinned?(event: ColumnPinnedEvent): void;\n\n    onColumnGroupOpened?(event: ColumnGroupOpenedEvent): void;\n\n    onColumnResized?(event: ColumnResizedEvent): void;\n\n    onDisplayedColumnsChanged?(event: DisplayedColumnsChangedEvent): void;\n\n    onVirtualColumnsChanged?(event: VirtualColumnsChangedEvent): void;\n\n    onRowGroupOpened?(event: RowGroupOpenedEvent): void;\n\n    onRowDataChanged?(event: RowDataChangedEvent): void;\n\n    onRowDataUpdated?(event: RowDataUpdatedEvent): void;\n\n    onPinnedRowDataChanged?(event: PinnedRowDataChangedEvent): void;\n\n    onRangeSelectionChanged?(event: RangeSelectionChangedEvent): void;\n\n    onColumnRowGroupChangeRequest?(event: ColumnRowGroupChangeRequestEvent): void;\n\n    onColumnPivotChangeRequest?(event: ColumnPivotChangeRequestEvent): void;\n\n    onColumnValueChangeRequest?(event: ColumnValueChangeRequestEvent): void;\n\n    onColumnAggFuncChangeRequest?(event: ColumnAggFuncChangeRequestEvent): void;\n\n    onModelUpdated?(event: ModelUpdatedEvent): void;\n\n    onCellKeyDown?(event: CellKeyDownEvent): void;\n\n    onCellKeyPress?(event: CellKeyPressEvent): void;\n\n    onCellClicked?(event: CellClickedEvent): void;\n\n    onCellMouseDown?(event: CellMouseDownEvent): void;\n\n    onCellDoubleClicked?(event: CellDoubleClickedEvent): void;\n\n    onCellContextMenu?(event: CellContextMenuEvent): void;\n\n    onCellValueChanged?(event: CellValueChangedEvent): void;\n\n    onCellMouseOver?(event: CellMouseOverEvent): void;\n\n    onCellMouseOut?(event: CellMouseOutEvent): void;\n\n    onRowValueChanged?(event: RowValueChangedEvent): void;\n\n    onRowEditingStarted?(event: RowEditingStartedEvent): void;\n\n    onRowEditingStopped?(event: RowEditingStoppedEvent): void;\n\n    onCellEditingStarted?(event: CellEditingStartedEvent): void;\n\n    onCellEditingStopped?(event: CellEditingStoppedEvent): void;\n\n    onCellFocused?(event: CellFocusedEvent): void;\n\n    onRowSelected?(event: RowSelectedEvent): void;\n\n    onSelectionChanged?(event: SelectionChangedEvent): void;\n\n    onFilterChanged?(event: FilterChangedEvent): void;\n\n    onFilterModified?(event: FilterModifiedEvent): void;\n\n    onSortChanged?(event: SortChangedEvent): void;\n\n    onVirtualRowRemoved?(event: VirtualRowRemovedEvent): void;\n\n    onRowClicked?(event: RowClickedEvent): void;\n\n    onRowDoubleClicked?(event: RowDoubleClickedEvent): void;\n\n    onGridReady?(event: GridReadyEvent): void;\n\n    onViewportChanged?(event: ViewportChangedEvent): void;\n\n    onDragStarted?(event: DragStartedEvent): void;\n\n    onDragStopped?(event: DragStoppedEvent): void;\n\n    onPaginationChanged?(event: PaginationChangedEvent): void;\n\n    onRowDragEnter?(event: RowDragEvent): void;\n\n    onRowDragMove?(event: RowDragEvent): void;\n\n    onRowDragLeave?(event: RowDragEvent): void;\n\n    onRowDragEnd?(event: RowDragEvent): void;\n\n    onPasteStart?(event: PasteStartEvent): void;\n\n    onPasteEnd?(event: PasteEndEvent): void;\n\n    onFillStart?(event: FillStartEvent): void;\n\n    onFillEnd?(event: FillEndEvent): void;\n\n    onBodyScroll?(event: BodyScrollEvent): void;\n\n    onFirstDataRendered?(event: FirstDataRenderedEvent): void;\n\n    onExpandOrCollapseAll?(event: ExpandCollapseAllEvent): void;\n\n    onChartCreated?(event: ChartCreated): void;\n\n    onChartRangeSelectionChanged?(event: ChartRangeSelectionChanged): void;\n\n    onChartOptionsChanged?(event: ChartOptionsChanged): void;\n\n    onChartDestroyed?(event: ChartDestroyed): void;\n\n    onComponentStateChanged?(event: ComponentStateChangedEvent): void;\n\n    onAsyncTransactionsFlushed?(event: AsyncTransactionsFlushed): void;\n\n    /** @deprecated */\n    onGridSizeChanged?(event: any): void;\n\n    // apis, set by the grid on init\n    api?: GridApi | null; // change to typed\n    columnApi?: ColumnApi | null; // change to typed\n}\n\nexport interface FillOperationParams {\n    event: MouseEvent;\n    values: any[];\n    initialValues: any[];\n    currentIndex: number;\n    currentCellValue: any;\n    api: GridApi;\n    columnApi: ColumnApi;\n    context: any;\n    direction: string; // up, down, left or right\n    column?: Column; // only present if up / down\n    rowNode?: RowNode; // only present if left / right,\n}\n\nexport interface GetDataPath {\n    (data: any): string[];\n}\n\nexport interface IsServerSideGroup {\n    (dataItem: any): boolean;\n}\n\nexport interface IsApplyServerSideTransaction {\n    (params: IsApplyServerSideTransactionParams): boolean;\n}\n\nexport interface IsApplyServerSideTransactionParams {\n    transaction: ServerSideTransaction;\n    parentNode: RowNode;\n    storeInfo: any;\n}\n\nexport interface GetServerSideGroupKey {\n    (dataItem: any): string;\n}\n\nexport interface IsRowMaster {\n    (dataItem: any): boolean;\n}\n\nexport interface IsRowSelectable {\n    (node: RowNode): boolean;\n}\n\nexport interface RowClassParams {\n    data: any;\n    node: RowNode;\n    rowIndex: number;\n    $scope: any;\n    api: GridApi;\n    columnApi: ColumnApi;\n    context: any;\n}\n\nexport interface ProcessChartOptionsParams {\n    type: ChartType;\n    options: ChartOptions<any>;\n}\n\nexport interface ProcessChartParams {\n    type: ChartType;\n    options: AgChartOptions;\n    chart: any;\n}\n\nexport interface GetContextMenuItemsParams {\n    defaultItems: string[] | undefined;\n    column: Column;\n    node: RowNode;\n    value: any;\n    api: GridApi | null | undefined;\n    columnApi: ColumnApi | null | undefined;\n    context: any;\n}\n\nexport interface GetContextMenuItems {\n    (params: GetContextMenuItemsParams): (string | MenuItemDef)[];\n}\n\nexport interface GetChartToolbarItemsParams {\n    defaultItems?: ChartMenuOptions[];\n    api?: GridApi | null;\n    columnApi?: ColumnApi | null;\n}\n\nexport interface GetChartToolbarItems {\n    (params: GetChartToolbarItemsParams): ChartMenuOptions[];\n}\n\nexport interface MenuItemDef {\n    name: string;\n    disabled?: boolean;\n    shortcut?: string;\n    action?: () => void;\n    checked?: boolean;\n    icon?: HTMLElement | string;\n    subMenu?: (MenuItemDef | string)[] | IComponent<any>;\n    cssClasses?: string[];\n    tooltip?: string;\n}\n\nexport interface GetMainMenuItemsParams {\n    column: Column;\n    api: GridApi | null | undefined;\n    columnApi: ColumnApi | null | undefined;\n    context: any;\n    defaultItems: string[];\n}\n\nexport interface GetMainMenuItems {\n    (params: GetMainMenuItemsParams): (string | MenuItemDef)[];\n}\n\nexport interface GetRowNodeIdFunc {\n    (data: any): string;\n}\n\nexport interface ProcessRowParams {\n    eRow: HTMLElement;\n    ePinnedLeftRow: HTMLElement;\n    ePinnedRightRow: HTMLElement;\n    rowIndex: number;\n    node: RowNode;\n    api: GridApi;\n    columnApi: ColumnApi;\n    addRenderedRowListener: (eventType: string, listener: Function) => void;\n    context: any;\n}\n\nexport interface NavigateToNextHeaderParams {\n    key: string;\n    previousHeaderPosition: HeaderPosition | null;\n    nextHeaderPosition: HeaderPosition | null;\n    event: KeyboardEvent;\n    headerRowCount: number;\n}\n\nexport interface TabToNextHeaderParams {\n    backwards: boolean;\n    previousHeaderPosition: HeaderPosition | null;\n    nextHeaderPosition: HeaderPosition | null;\n    headerRowCount: number;\n}\n\nexport interface NavigateToNextCellParams {\n    key: number;\n    previousCellPosition: CellPosition;\n    nextCellPosition: CellPosition | null;\n    event: KeyboardEvent | null;\n}\n\nexport interface TabToNextCellParams {\n    backwards: boolean;\n    editing: boolean;\n    previousCellPosition: CellPosition;\n    nextCellPosition: CellPosition;\n}\n\nexport interface PostProcessPopupParams {\n    // if popup is for a column, this gives the Column\n    column?: Column | null;\n    // if popup is for a row, this gives the RowNode\n    rowNode?: RowNode;\n    // the popup we are showing\n    ePopup: HTMLElement;\n    // The different types are: 'contextMenu', 'columnMenu', 'aggFuncSelect', 'popupCellEditor'\n    type: string;\n    // if the popup is as a result of a button click (eg menu button), this is the component that the user clicked\n    eventSource?: HTMLElement | null;\n    // if the popup is as a result of a click or touch, this is the event - eg user showing context menu\n    mouseEvent?: MouseEvent | Touch | null;\n}\n\nexport interface PaginationNumberFormatterParams {\n    value: number;\n}\n\nexport interface ProcessDataFromClipboardParams {\n    data: string[][];\n}\n\nexport interface ChartRef {\n    chart: any;\n    chartElement: HTMLElement;\n    destroyChart: () => void;\n}\n\nexport enum ServerSideStoreType {\n    Full = 'full',\n    Partial = 'partial'\n}\n\nexport interface ServerSideStoreParams {\n    storeType?: ServerSideStoreType;\n    maxBlocksInCache?: number;\n    cacheBlockSize?: number;\n}\n\nexport interface GetServerSideStoreParamsParams {\n    level: number;\n    parentRowNode?: RowNode;\n    rowGroupColumns: Column[];\n    pivotColumns: Column[];\n    pivotMode: boolean;\n}\n\nexport interface IsServerSideGroupOpenByDefaultParams {\n    data: any;\n    rowNode: RowNode;\n}\n\nexport interface IsGroupOpenByDefaultParams {\n    rowNode: RowNode;\n    rowGroupColumn: Column;\n    level: number;\n    field: string;\n    key: string;\n}\n"]}