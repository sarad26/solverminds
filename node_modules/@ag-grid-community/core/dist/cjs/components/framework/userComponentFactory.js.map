{"version":3,"sources":["../../src/ts/components/framework/userComponentFactory.ts"],"names":[],"mappings":"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","file":"userComponentFactory.js","sourcesContent":["import { Autowired, Bean, Optional } from \"../../context/context\";\nimport { GridOptions } from \"../../entities/gridOptions\";\nimport { FrameworkComponentWrapper } from \"./frameworkComponentWrapper\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { ColDef, ColGroupDef } from \"../../entities/colDef\";\nimport {\n    AgGridComponentFunctionInput,\n    AgGridRegisteredComponentInput,\n    RegisteredComponent,\n    RegisteredComponentSource,\n    UserComponentRegistry\n} from \"./userComponentRegistry\";\nimport { AgComponentUtils } from \"./agComponentUtils\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport { ISetFilterParams } from \"../../interfaces/iSetFilterParams\";\nimport { IRichCellEditorParams } from \"../../interfaces/iRichCellEditorParams\";\nimport { ToolPanelDef } from \"../../entities/sideBar\";\nimport { AgPromise } from \"../../utils\";\nimport { IDateComp, IDateParams } from \"../../rendering/dateComponent\";\nimport { IHeaderComp, IHeaderParams } from \"../../headerRendering/header/headerComp\";\nimport { IHeaderGroupComp, IHeaderGroupParams } from \"../../headerRendering/headerGroup/headerGroupComp\";\nimport { ICellRendererComp, ICellRendererParams, ISetFilterCellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { GroupCellRendererParams } from \"../../rendering/cellRenderers/groupCellRenderer\";\nimport { ILoadingOverlayComp, ILoadingOverlayParams } from \"../../rendering/overlays/loadingOverlayComponent\";\nimport { INoRowsOverlayComp, INoRowsOverlayParams } from \"../../rendering/overlays/noRowsOverlayComponent\";\nimport { ITooltipComp, ITooltipParams } from \"../../rendering/tooltipComponent\";\nimport { IFilterComp, IFilterParams, IFilterDef } from \"../../interfaces/iFilter\";\nimport { IFloatingFilterComp, IFloatingFilterParams } from \"../../filter/floating/floatingFilter\";\nimport { ICellEditorComp, ICellEditorParams } from \"../../interfaces/iCellEditor\";\nimport { IToolPanelComp, IToolPanelParams } from \"../../interfaces/iToolPanel\";\nimport { IStatusPanelComp, IStatusPanelParams, StatusPanelDef } from \"../../interfaces/iStatusPanel\";\nimport {\n    CellEditorComponent,\n    CellRendererComponent,\n    ComponentType,\n    DateComponent,\n    FilterComponent,\n    FloatingFilterComponent,\n    HeaderComponent,\n    HeaderGroupComponent,\n    InnerRendererComponent,\n    LoadingOverlayComponent,\n    NoRowsOverlayComponent,\n    PinnedRowCellRendererComponent,\n    StatusPanelComponent,\n    ToolPanelComponent,\n    TooltipComponent\n} from \"./componentTypes\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { cloneObject, mergeDeep } from '../../utils/object';\n\nexport type DefinitionObject =\n    GridOptions\n    | ColDef\n    | ColGroupDef\n    | IFilterDef\n    | ISetFilterParams\n    | IRichCellEditorParams\n    | ToolPanelDef\n    | StatusPanelDef;\n\nexport type AgComponentPropertyInput<A extends IComponent<TParams>, TParams> =\n    AgGridRegisteredComponentInput<A> | string | boolean;\n\nexport enum ComponentSource {\n    DEFAULT, REGISTERED_BY_NAME, HARDCODED\n}\n\nexport interface ComponentSelectorResult {\n    component?: string;\n    params?: any;\n}\n\n/**\n * B the business interface (ie IHeader)\n * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid\n */\nexport interface ComponentClassDef<A extends IComponent<TParams> & B, B, TParams> {\n    component: { new(): A; } | { new(): B; } | null;\n    componentFromFramework: boolean; // true if component came from framework eg React or Angular\n    source: ComponentSource; // [Default, Registered by Name, Hard Coded]\n    paramsFromSelector: TParams | null; // Params the selector function provided, if any\n}\n\n@Bean('userComponentFactory')\nexport class UserComponentFactory extends BeanStub {\n    @Autowired('gridOptions') private readonly gridOptions: GridOptions;\n    @Autowired('agComponentUtils') private readonly agComponentUtils: AgComponentUtils;\n    @Autowired('componentMetadataProvider') private readonly componentMetadataProvider: ComponentMetadataProvider;\n    @Autowired('userComponentRegistry') private readonly userComponentRegistry: UserComponentRegistry;\n    @Optional('frameworkComponentWrapper') private readonly frameworkComponentWrapper: FrameworkComponentWrapper;\n\n    public newDateComponent(params: IDateParams): AgPromise<IDateComp> | null {\n        return this.createAndInitUserComponent(this.gridOptions, params, DateComponent, 'agDateInput');\n    }\n\n    public newHeaderComponent(params: IHeaderParams): AgPromise<IHeaderComp> | null {\n        return this.createAndInitUserComponent(params.column.getColDef(), params, HeaderComponent, 'agColumnHeader');\n    }\n\n    public newHeaderGroupComponent(params: IHeaderGroupParams): AgPromise<IHeaderGroupComp> | null {\n        return this.createAndInitUserComponent(\n            params.columnGroup.getColGroupDef(), params, HeaderGroupComponent, 'agColumnGroupHeader');\n    }\n\n    public newFullWidthGroupRowInnerCellRenderer(params: ICellRendererParams): AgPromise<ICellRendererComp> | null {\n        return this.createAndInitUserComponent(this.gridOptions.groupRowRendererParams, params, InnerRendererComponent, null, true);\n    }\n\n    // this one is unusual, as it can be LoadingCellRenderer, DetailCellRenderer, FullWidthCellRenderer or GroupRowRenderer.\n    // so we have to pass the type in.\n    public newFullWidthCellRenderer(\n        params: ICellRendererParams, cellRendererType: string, cellRendererName: string): AgPromise<ICellRendererComp> | null {\n        return this.createAndInitUserComponent(\n            null,\n            params,\n            { propertyName: cellRendererType, isCellRenderer: () => true },\n            cellRendererName);\n    }\n\n    public newCellRenderer(\n        target: ColDef | IRichCellEditorParams,\n        params: ICellRendererParams,\n        isPinned = false): AgPromise<ICellRendererComp> | null {\n        return this.createAndInitUserComponent(\n            target, params, isPinned ? PinnedRowCellRendererComponent : CellRendererComponent, null, true);\n    }\n\n    public newCellEditor(colDef: ColDef, params: ICellEditorParams): AgPromise<ICellEditorComp> | null {\n        return this.createAndInitUserComponent(colDef, params, CellEditorComponent, 'agCellEditor');\n    }\n\n    public newInnerCellRenderer(target: GroupCellRendererParams, params: ICellRendererParams): AgPromise<ICellRendererComp> | null {\n        return this.createAndInitUserComponent(target, params, InnerRendererComponent, null);\n    }\n\n    public newLoadingOverlayComponent(params: ILoadingOverlayParams): AgPromise<ILoadingOverlayComp> | null {\n        return this.createAndInitUserComponent(this.gridOptions, params, LoadingOverlayComponent, 'agLoadingOverlay');\n    }\n\n    public newNoRowsOverlayComponent(params: INoRowsOverlayParams): AgPromise<INoRowsOverlayComp> | null {\n        return this.createAndInitUserComponent(this.gridOptions, params, NoRowsOverlayComponent, 'agNoRowsOverlay');\n    }\n\n    public newTooltipComponent(params: ITooltipParams): AgPromise<ITooltipComp> | null {\n        return this.createAndInitUserComponent(params.colDef, params, TooltipComponent, 'agTooltipComponent');\n    }\n\n    public newFilterComponent(def: IFilterDef, params: IFilterParams, defaultFilter: string): AgPromise<IFilterComp> | null {\n        return this.createAndInitUserComponent(def, params, FilterComponent, defaultFilter, false);\n    }\n\n    public newSetFilterCellRenderer(\n        target: ISetFilterParams, params: ISetFilterCellRendererParams): AgPromise<ICellRendererComp> | null {\n        return this.createAndInitUserComponent(target, params, CellRendererComponent, null, true);\n    }\n\n    public newFloatingFilterComponent(\n        def: IFilterDef, params: IFloatingFilterParams, defaultFloatingFilter: string | null): AgPromise<IFloatingFilterComp> | null {\n        return this.createAndInitUserComponent(def, params, FloatingFilterComponent, defaultFloatingFilter, true);\n    }\n\n    public newToolPanelComponent(toolPanelDef: ToolPanelDef, params: IToolPanelParams): AgPromise<IToolPanelComp> | null {\n        return this.createAndInitUserComponent(toolPanelDef, params, ToolPanelComponent);\n    }\n\n    public newStatusPanelComponent(def: StatusPanelDef, params: IStatusPanelParams): AgPromise<IStatusPanelComp> | null {\n        return this.createAndInitUserComponent(def, params, StatusPanelComponent);\n    }\n\n    /**\n     * This method creates a component given everything needed to guess what sort of component needs to be instantiated\n     * It takes\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param paramsFromGrid: Params to be passed to the component and passed by AG Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in\n     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify\n     *  @param optional: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no\n     *      component found, it throws an error, by default all components are MANDATORY\n     */\n    public createAndInitUserComponent<A extends IComponent<TParams>, TParams>(\n        definitionObject: DefinitionObject | null,\n        paramsFromGrid: TParams,\n        componentType: ComponentType,\n        defaultComponentName?: string | null,\n        // optional items are: FloatingFilter, CellComp (for cellRenderer)\n        optional = false,\n    ): AgPromise<A> | null {\n        if (!definitionObject) {\n            definitionObject = this.gridOptions;\n        }\n\n        // Create the component instance\n        const componentAndParams: { componentInstance: A, paramsFromSelector: TParams; } | null\n            = this.createComponentInstance(definitionObject, componentType, paramsFromGrid, defaultComponentName, optional);\n\n        if (!componentAndParams) {\n            return null;\n        }\n\n        const componentInstance = componentAndParams.componentInstance;\n\n        // Wire the component and call the init method with the correct params\n        const params = this.createFinalParams(\n            definitionObject, componentType.propertyName, paramsFromGrid, componentAndParams.paramsFromSelector);\n\n        this.addReactHacks(params);\n\n        const deferredInit = this.initComponent(componentInstance, params);\n\n        if (deferredInit == null) {\n            return AgPromise.resolve(componentInstance);\n        }\n        return (deferredInit as AgPromise<void>).then(() => componentInstance);\n    }\n\n    private addReactHacks(params: any): void {\n        // a temporary fix for AG-1574\n        // AG-1715 raised to do a wider ranging refactor to improve this\n        const agGridReact = this.context.getBean('agGridReact');\n\n        if (agGridReact) {\n            params.agGridReact = cloneObject(agGridReact);\n        }\n\n        // AG-1716 - directly related to AG-1574 and AG-1715\n        const frameworkComponentWrapper = this.context.getBean('frameworkComponentWrapper');\n\n        if (frameworkComponentWrapper) {\n            params.frameworkComponentWrapper = frameworkComponentWrapper;\n        }\n    }\n\n    /**\n     * This method creates a component given everything needed to guess what sort of component needs to be instantiated\n     * It takes\n     *  @param clazz: The class to instantiate,\n     *  @param agGridParams: Params to be passed to the component and passed by AG Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     *  @param modifyParamsCallback: A chance to customise the params passed to the init method. It receives what the current\n     *  params are and the component that init is about to get called for\n     */\n    public createUserComponentFromConcreteClass<A extends IComponent<TParams>, TParams>(\n        clazz: { new(): A; }, agGridParams: TParams): A {\n        const internalComponent = new clazz();\n\n        this.initComponent(internalComponent, agGridParams);\n\n        return internalComponent;\n    }\n\n    /**\n     * This method returns the underlying representation of the component to be created. ie for Javascript the\n     * underlying function where we should be calling new into. In case of the frameworks, the framework class\n     * object that represents the component to be created.\n     *\n     * This method is handy for different reasons, for example if you want to check if a component has a particular\n     * method implemented without having to create the component, just by inspecting the source component\n     *\n     * It takes\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param params: Params to be passed to the dynamic component function in case it needs to be\n     *      invoked\n     *  @param defaultComponentName: The name of the component to load if there is no component specified\n     */\n    public lookupComponentClassDef<A extends IComponent<TParams> & B, B, TParams>(\n        definitionObject: DefinitionObject,\n        propertyName: string,\n        params: TParams | null = null,\n        defaultComponentName?: string | null\n    ): ComponentClassDef<A, B, TParams> | null {\n        /**\n         * There are five things that can happen when resolving a component.\n         *  a) HardcodedFwComponent: That holder[propertyName]Framework has associated a Framework native component\n         *  b) HardcodedJsComponent: That holder[propertyName] has associate a JS component\n         *  c) hardcodedJsFunction: That holder[propertyName] has associate a JS function\n         *  d) hardcodedNameComponent: That holder[propertyName] has associate a string that represents a component to load\n         *  e) That none of the three previous are specified, then we need to use the DefaultRegisteredComponent\n         */\n        let hardcodedNameComponent: string | null = null;\n        let HardcodedJsComponent: { new(): A; } | null = null;\n        let hardcodedJsFunction: AgGridComponentFunctionInput | null = null;\n        let HardcodedFwComponent: { new(): B; } | null = null;\n        let componentSelectorFunc: ((params: TParams | null) => ComponentSelectorResult) | null = null;\n\n        if (definitionObject != null) {\n            const componentPropertyValue: AgComponentPropertyInput<IComponent<TParams>, TParams> = (definitionObject as any)[propertyName];\n            // for filters only, we allow 'true' for the component, which means default filter to be used\n            const usingDefaultComponent = componentPropertyValue === true;\n            if (componentPropertyValue != null && !usingDefaultComponent) {\n                if (typeof componentPropertyValue === 'string') {\n                    hardcodedNameComponent = componentPropertyValue;\n                } else if (typeof componentPropertyValue === 'boolean') {\n                    // never happens, as we test for usingDefaultComponent above,\n                    // however it's needed for the next block to compile\n                } else if (this.agComponentUtils.doesImplementIComponent(componentPropertyValue)) {\n                    HardcodedJsComponent = componentPropertyValue as { new(): A; };\n                } else {\n                    hardcodedJsFunction = componentPropertyValue as AgGridComponentFunctionInput;\n                }\n            }\n            HardcodedFwComponent = (definitionObject as any)[propertyName + \"Framework\"];\n            componentSelectorFunc = (definitionObject as any)[propertyName + \"Selector\"];\n        }\n\n        /**\n         * Since we allow many types of flavors for specifying the components, let's make sure this is not an illegal\n         * combination\n         */\n\n        if (\n            (HardcodedJsComponent && HardcodedFwComponent) ||\n            (hardcodedNameComponent && HardcodedFwComponent) ||\n            (hardcodedJsFunction && HardcodedFwComponent)\n        ) {\n            throw Error(\"ag-grid: you are trying to specify: \" + propertyName + \" twice as a component.\");\n        }\n\n        if (HardcodedFwComponent && !this.frameworkComponentWrapper) {\n            throw Error(\"ag-grid: you are specifying a framework component but you are not using a framework version of ag-grid for : \" + propertyName);\n        }\n\n        if (componentSelectorFunc && (hardcodedNameComponent || HardcodedJsComponent || hardcodedJsFunction || HardcodedFwComponent)) {\n            throw Error(\"ag-grid: you can't specify both, the selector and the component of ag-grid for : \" + propertyName);\n        }\n\n        /**\n         * At this stage we are guaranteed to either have,\n         * DEPRECATED\n         * - A unique HardcodedFwComponent\n         * - A unique HardcodedJsComponent\n         * - A unique hardcodedJsFunction\n         * BY NAME- FAVOURED APPROACH\n         * - A unique hardcodedNameComponent\n         * - None of the previous, hence we revert to: RegisteredComponent\n         */\n        if (HardcodedFwComponent) {\n            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);\n            // console.warn(`${HardcodedFwComponent}`);\n            return {\n                componentFromFramework: true,\n                component: HardcodedFwComponent,\n                source: ComponentSource.HARDCODED,\n                paramsFromSelector: null\n            };\n        }\n\n        if (HardcodedJsComponent) {\n            // console.warn(`ag-grid: Since version 12.1.0 specifying a component directly is deprecated, you should register the component by name`);\n            // console.warn(`${HardcodedJsComponent}`);\n            return {\n                componentFromFramework: false,\n                component: HardcodedJsComponent,\n                source: ComponentSource.HARDCODED,\n                paramsFromSelector: null\n            };\n        }\n\n        if (hardcodedJsFunction) {\n            // console.warn(`ag-grid: Since version 12.1.0 specifying a function directly is deprecated, you should register the component by name`);\n            // console.warn(`${hardcodedJsFunction}`);\n            return this.agComponentUtils.adaptFunction(propertyName, hardcodedJsFunction, false, ComponentSource.HARDCODED) as ComponentClassDef<A, B, TParams>;\n        }\n\n        const selectorResult = componentSelectorFunc ? componentSelectorFunc(params) : null;\n\n        let componentNameToUse: string | null | undefined;\n        if (selectorResult && selectorResult.component) {\n            componentNameToUse = selectorResult.component;\n        } else if (hardcodedNameComponent) {\n            componentNameToUse = hardcodedNameComponent;\n        } else {\n            componentNameToUse = defaultComponentName;\n        }\n\n        if (!componentNameToUse) {\n            return null;\n        }\n\n        const registeredCompClassDef = this.lookupFromRegisteredComponents(propertyName, componentNameToUse) as ComponentClassDef<A, B, TParams>;\n\n        if (!registeredCompClassDef) {\n            return null;\n        }\n\n        return {\n            componentFromFramework: registeredCompClassDef.componentFromFramework,\n            component: registeredCompClassDef.component,\n            source: registeredCompClassDef.source,\n            paramsFromSelector: selectorResult ? selectorResult.params : null\n        };\n    }\n\n    private lookupFromRegisteredComponents<A extends IComponent<TParams> & B, B, TParams>(\n        propertyName: string,\n        componentNameOpt?: string\n    ): ComponentClassDef<A, B, TParams> | null {\n        const componentName: string = componentNameOpt != null ? componentNameOpt : propertyName;\n        const registeredComponent: RegisteredComponent<A, B> | null = this.userComponentRegistry.retrieve(componentName);\n\n        if (registeredComponent == null) {\n            return null;\n        }\n\n        //If it is a FW it has to be registered as a component\n        if (registeredComponent.componentFromFramework) {\n            return {\n                component: registeredComponent.component as { new(): B; },\n                componentFromFramework: true,\n                source: ComponentSource.REGISTERED_BY_NAME,\n                paramsFromSelector: null\n            };\n        }\n\n        //If it is JS it may be a function or a component\n        if (this.agComponentUtils.doesImplementIComponent(registeredComponent.component as AgGridRegisteredComponentInput<A>)) {\n            return {\n                component: registeredComponent.component as { new(): A; },\n                componentFromFramework: false,\n                source: (registeredComponent.source == RegisteredComponentSource.REGISTERED) ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT,\n                paramsFromSelector: null\n            };\n        }\n\n        // This is a function\n        return this.agComponentUtils.adaptFunction(\n            propertyName,\n            registeredComponent.component as AgGridComponentFunctionInput,\n            registeredComponent.componentFromFramework,\n            (registeredComponent.source == RegisteredComponentSource.REGISTERED) ? ComponentSource.REGISTERED_BY_NAME : ComponentSource.DEFAULT\n        );\n    }\n\n    /**\n     * Useful to check what would be the resultant params for a given object\n     *  @param definitionObject: This is the context for which this component needs to be created, it can be gridOptions\n     *      (global) or columnDef mostly.\n     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:\n     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component\n     *  @param paramsFromGrid: Params to be passed to the component and passed by AG Grid. This will get merged with any params\n     *      specified by the user in the configuration\n     * @returns {TParams} It merges the user agGridParams with the actual params specified by the user.\n     */\n    public createFinalParams<TParams>(\n        definitionObject: DefinitionObject,\n        propertyName: string,\n        paramsFromGrid: TParams,\n        paramsFromSelector: any = null): TParams {\n        const params = {} as TParams;\n\n        mergeDeep(params, paramsFromGrid);\n\n        const userParams: TParams = definitionObject ? (definitionObject as any)[propertyName + \"Params\"] : null;\n\n        if (userParams != null) {\n            if (typeof userParams === 'function') {\n                const userParamsFromFunc = userParams(paramsFromGrid);\n                mergeDeep(params, userParamsFromFunc);\n            } else if (typeof userParams === 'object') {\n                mergeDeep(params, userParams);\n            }\n        }\n\n        mergeDeep(params, paramsFromSelector);\n\n        return params;\n    }\n\n    private createComponentInstance<A extends IComponent<TParams> & B, B, TParams>(\n        holder: DefinitionObject,\n        componentType: ComponentType,\n        paramsForSelector: TParams,\n        defaultComponentName: string | null | undefined,\n        optional: boolean\n    ): { componentInstance: A, paramsFromSelector: any; } | null {\n        const propertyName = componentType.propertyName;\n        const componentToUse: ComponentClassDef<A, B, TParams> =\n            this.lookupComponentClassDef(holder, propertyName, paramsForSelector, defaultComponentName) as ComponentClassDef<A, B, TParams>;\n\n        const missing = !componentToUse || !componentToUse.component;\n        if (missing) {\n            // to help the user, we print out the name they are looking for, rather than the default name.\n            // i don't know why the default name was originally printed out (that doesn't help the user)\n            const overrideName = holder ? (holder as any)[propertyName] : defaultComponentName;\n            const nameToReport = overrideName ? overrideName : defaultComponentName;\n            if (!optional) {\n                console.error(`Could not find component ${nameToReport}, did you forget to configure this component?`);\n            }\n            return null;\n        }\n\n        let componentInstance: A;\n\n        if (componentToUse.componentFromFramework) {\n            // Using framework component\n            const FrameworkComponentRaw: { new(): B; } | null = componentToUse.component;\n            const thisComponentConfig: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n            componentInstance = this.frameworkComponentWrapper.wrap(\n                FrameworkComponentRaw,\n                thisComponentConfig.mandatoryMethodList,\n                thisComponentConfig.optionalMethodList,\n                componentType,\n                defaultComponentName\n            );\n        } else {\n            // Using plain JavaScript component\n            componentInstance = new componentToUse.component!() as A;\n        }\n\n        return { componentInstance: componentInstance, paramsFromSelector: componentToUse.paramsFromSelector };\n    }\n\n    private initComponent<A extends IComponent<TParams>, TParams>(component: A, params: TParams): AgPromise<void> | void {\n        this.context.createBean(component);\n\n        if (component.init == null) {\n            return;\n        }\n\n        return component.init(params);\n    }\n}\n"]}