{"version":3,"sources":["../../src/ts/components/framework/agComponentUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAwD;AAMxD,mDAAkD;AAClD,uCAA+C;AAG/C;IAAsC,oCAAQ;IAA9C;;IA6DA,CAAC;IAxDU,wCAAa,GAApB,UACI,YAAoB,EACpB,mBAAiD,EACjD,sBAA+B,EAC/B,MAAuB;QAEvB,IAAI,mBAAmB,IAAI,IAAI,EAAE;YAC7B,OAAO;gBACH,SAAS,EAAE,IAAI;gBACf,sBAAsB,EAAE,sBAAsB;gBAC9C,MAAM,EAAE,MAAM;gBACd,kBAAkB,EAAE,IAAI;aAC3B,CAAC;SACL;QAED,IAAM,QAAQ,GAAsB,IAAI,CAAC,yBAAyB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QAC1F,IAAI,QAAQ,IAAI,QAAQ,CAAC,eAAe,EAAE;YACtC,OAAO;gBACH,sBAAsB,EAAE,sBAAsB;gBAC9C,SAAS,EAAE,QAAQ,CAAC,eAAe,CAAC,mBAAmB,CAAkB;gBACzE,MAAM,EAAE,MAAM;gBACd,kBAAkB,EAAE,IAAI;aAC3B,CAAC;SACL;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,oDAAyB,GAAhC,UAAiC,QAAsC;QACnE;YAAA;YAmBA,CAAC;YAhBG,yBAAO,GAAP,UAAQ,MAA2B;gBAC/B,OAAO,KAAK,CAAC;YACjB,CAAC;YAED,wBAAM,GAAN;gBACI,IAAM,cAAc,GAAyB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACnE,IAAM,IAAI,GAAG,OAAO,cAAc,CAAC;gBACnC,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,SAAS,EAAE;oBAC9D,OAAO,kBAAY,CAAC,QAAQ,GAAG,cAAc,GAAG,SAAS,CAAC,CAAC;iBAC9D;gBACD,OAAO,cAA6B,CAAC;YACzC,CAAC;YAED,sBAAI,GAAJ,UAAM,MAA2B;gBAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACzB,CAAC;YACL,cAAC;QAAD,CAnBA,AAmBC,IAAA;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAEM,kDAAuB,GAA9B,UAA+B,SAA0D;QACrF,IAAI,CAAC,SAAS,EAAE;YAAE,OAAO,KAAK,CAAC;SAAE;QACjC,OAAQ,SAAiB,CAAC,SAAS,IAAI,QAAQ,IAAK,SAAiB,CAAC,SAAS,CAAC;IACpF,CAAC;IAzDD;QADC,mBAAS,CAAC,2BAA2B,CAAC;uEACsB;IAHpD,gBAAgB;QAD5B,cAAI,CAAC,kBAAkB,CAAC;OACZ,gBAAgB,CA6D5B;IAAD,uBAAC;CA7DD,AA6DC,CA7DqC,mBAAQ,GA6D7C;AA7DY,4CAAgB","file":"agComponentUtils.js","sourcesContent":["import { Autowired, Bean } from \"../../context/context\";\nimport { AgGridComponentFunctionInput, AgGridRegisteredComponentInput } from \"./userComponentRegistry\";\nimport { IComponent } from \"../../interfaces/iComponent\";\nimport { ComponentMetadata, ComponentMetadataProvider } from \"./componentMetadataProvider\";\nimport { ComponentClassDef, ComponentSource } from \"./userComponentFactory\";\nimport { ICellRendererComp, ICellRendererParams } from \"../../rendering/cellRenderers/iCellRenderer\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { loadTemplate } from \"../../utils/dom\";\n\n@Bean(\"agComponentUtils\")\nexport class AgComponentUtils extends BeanStub {\n\n    @Autowired(\"componentMetadataProvider\")\n    private componentMetadataProvider: ComponentMetadataProvider;\n\n    public adaptFunction<A extends IComponent<any> & B, B, TParams>(\n        propertyName: string,\n        hardcodedJsFunction: AgGridComponentFunctionInput,\n        componentFromFramework: boolean,\n        source: ComponentSource\n    ): ComponentClassDef<A, B, TParams> | null {\n        if (hardcodedJsFunction == null) {\n            return {\n                component: null,\n                componentFromFramework: componentFromFramework,\n                source: source,\n                paramsFromSelector: null\n            };\n        }\n\n        const metadata: ComponentMetadata = this.componentMetadataProvider.retrieve(propertyName);\n        if (metadata && metadata.functionAdapter) {\n            return {\n                componentFromFramework: componentFromFramework,\n                component: metadata.functionAdapter(hardcodedJsFunction) as { new(): A; },\n                source: source,\n                paramsFromSelector: null\n            };\n        }\n        return null;\n    }\n\n    public adaptCellRendererFunction(callback: AgGridComponentFunctionInput): { new(): IComponent<ICellRendererParams>; } {\n        class Adapter implements ICellRendererComp {\n            private params: ICellRendererParams;\n\n            refresh(params: ICellRendererParams): boolean {\n                return false;\n            }\n\n            getGui(): HTMLElement {\n                const callbackResult: string | HTMLElement = callback(this.params);\n                const type = typeof callbackResult;\n                if (type === 'string' || type === 'number' || type === 'boolean') {\n                    return loadTemplate('<span>' + callbackResult + '</span>');\n                }\n                return callbackResult as HTMLElement;\n            }\n\n            init?(params: ICellRendererParams): void {\n                this.params = params;\n            }\n        }\n\n        return Adapter;\n    }\n\n    public doesImplementIComponent(candidate: AgGridRegisteredComponentInput<IComponent<any>>): boolean {\n        if (!candidate) { return false; }\n        return (candidate as any).prototype && 'getGui' in (candidate as any).prototype;\n    }\n}\n"]}