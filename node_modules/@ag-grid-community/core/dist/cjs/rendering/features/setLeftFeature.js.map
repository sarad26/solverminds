{"version":3,"sources":["../../src/ts/rendering/features/setLeftFeature.ts"],"names":[],"mappings":"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","file":"setLeftFeature.js","sourcesContent":["import { ColumnGroupChild } from \"../../entities/columnGroupChild\";\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Beans } from \"../beans\";\nimport { Constants } from \"../../constants/constants\";\nimport { PostConstruct } from \"../../context/context\";\nimport { ColumnGroup } from \"../../entities/columnGroup\";\nimport { setAriaColIndex, setAriaColSpan } from \"../../utils/aria\";\nimport { last } from \"../../utils/array\";\nimport { exists } from \"../../utils/generic\";\nimport { Events } from \"../../eventKeys\";\n\nexport class SetLeftFeature extends BeanStub {\n\n    private readonly columnOrGroup: ColumnGroupChild;\n    private eCell: HTMLElement;\n    private ariaEl: HTMLElement;\n\n    private actualLeft: number;\n\n    // if we are spanning columns, this tells what columns,\n    // otherwise this is empty\n    private colsSpanning: Column[] | undefined;\n\n    private beans: Beans;\n\n    private readonly printLayout: boolean;\n\n    constructor(columnOrGroup: ColumnGroupChild, eCell: HTMLElement, beans: Beans, colsSpanning?: Column[]) {\n        super();\n        this.columnOrGroup = columnOrGroup;\n        this.eCell = eCell;\n        this.ariaEl = this.eCell.querySelector('[role=columnheader]') || this.eCell;\n        this.colsSpanning = colsSpanning;\n        this.beans = beans;\n        this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n    }\n\n    public setColsSpanning(colsSpanning: Column[]): void {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    }\n\n    public getColumnOrGroup(): ColumnGroupChild {\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            return last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\n        // so additionally update left if any column width changes.\n        if (this.printLayout) {\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));\n        }\n    }\n\n    private setLeftFirstTime(): void {\n        const suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n        const oldLeftExists = exists(this.columnOrGroup.getOldLeft());\n        const animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        } else {\n            this.onLeftChanged();\n        }\n    }\n\n    private animateInLeft(): void {\n        const colOrGroup = this.getColumnOrGroup();\n\n        const left = colOrGroup.getLeft();\n        const oldLeft = colOrGroup.getOldLeft();\n\n        const oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft!);\n        const actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n\n        this.setLeft(oldActualLeft!);\n\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = actualLeft;\n\n        this.beans.columnAnimationService.executeNextVMTurn(() => {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (this.actualLeft === actualLeft) {\n                this.setLeft(actualLeft);\n            }\n        });\n    }\n\n    private onLeftChanged(): void {\n        const colOrGroup = this.getColumnOrGroup();\n        const left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left!);\n        this.setLeft(this.actualLeft);\n    }\n\n    private modifyLeftForPrintLayout(colOrGroup: ColumnGroupChild, leftPosition: number): number {\n        if (!this.printLayout) { return leftPosition; }\n\n        if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n\n        const leftWidth = this.beans.columnController.getDisplayedColumnsLeftWidth();\n\n        if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {\n            const bodyWidth = this.beans.columnController.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n\n        // is in body\n        return leftWidth + leftPosition;\n    }\n\n    private setLeft(value: number): void {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (exists(value)) {\n            this.eCell.style.left = `${value}px`;\n        }\n\n        let indexColumn: Column;\n\n        if (this.columnOrGroup instanceof Column) {\n            indexColumn = this.columnOrGroup;\n        } else {\n            const columnGroup = this.columnOrGroup as ColumnGroup;\n            const children = columnGroup.getLeafColumns();\n\n            if (!children.length) { return; }\n\n            if (children.length > 1) {\n                setAriaColSpan(this.ariaEl, children.length);\n            }\n\n            indexColumn = children[0];\n        }\n\n        const index = this.beans.columnController.getAriaColumnIndex(indexColumn);\n        setAriaColIndex(this.ariaEl, index);\n    }\n}\n"]}