{"version":3,"sources":["../../src/ts/rendering/row/rowComp.ts"],"names":[],"mappings":"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","file":"rowComp.js","sourcesContent":["import { Component } from \"../../widgets/component\";\nimport { RowContainerComp } from \"../../gridBodyComp/rowContainer/rowContainerComp\";\nimport { ICellRendererComp } from \"../cellRenderers/iCellRenderer\";\nimport { Beans } from \"../beans\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { setDomChildOrder } from \"../../utils/dom\";\nimport { escapeString } from \"../../utils/string\";\nimport { FullWidthKeys, FullWidthRenderers, RowController, RowType } from \"./rowController\";\nimport { Column } from \"../../entities/column\";\nimport { CellComp } from \"../cellComp\";\nimport { assign, getAllValuesInObject, iterateObject } from \"../../utils/object\";\nimport { Constants } from \"../../constants/constants\";\nimport { ModuleRegistry } from \"../../modules/moduleRegistry\";\nimport { ModuleNames } from \"../../modules/moduleNames\";\n\nexport class RowComp extends Component {\n\n    private container: RowContainerComp;\n    private fullWidthRowComponent: ICellRendererComp | null | undefined;\n\n    private beans: Beans;\n    private pinned: string | null;\n\n    private rowNode: RowNode;\n    private controller: RowController;\n\n    private cellComps: { [key: string]: CellComp | null; } = {};\n\n    constructor(controller: RowController, container: RowContainerComp, beans: Beans, pinned: string | null) {\n        super();\n\n        this.container = container;\n        this.beans = beans;\n        this.rowNode = controller.getRowNode();\n        this.pinned = pinned;\n        this.controller = controller;\n\n        const template = this.createTemplate();\n        this.setTemplate(template);\n\n        this.afterRowAttached();\n\n        switch (pinned) {\n            case Constants.PINNED_LEFT:\n                controller.setLeftRowComp(this);\n                break;\n            case Constants.PINNED_RIGHT:\n                controller.setRightRowComp(this);\n                break;\n            default:\n                if (controller.isFullWidth() && !beans.gridOptionsWrapper.isEmbedFullWidthRows()) {\n                    controller.setFullWidthRowComp(this);\n                } else {\n                    controller.setCenterRowComp(this);\n                }\n                break;\n        }\n\n        if (controller.isFullWidth()) {\n            this.createFullWidthRowCell();\n        } else {\n            this.onColumnChanged();\n            this.controller.refreshAriaLabel(this.getGui(), !!this.rowNode.isSelected());\n        }\n    }\n\n    private createFullWidthRowCell(): void {\n        const params = this.controller.createFullWidthParams(this.getGui(), this.pinned);\n\n        const callback = (cellRenderer: ICellRendererComp) => {\n            if (this.isAlive()) {\n                const eGui = cellRenderer.getGui();\n                this.getGui().appendChild(eGui);\n                if (this.controller.getRowType() === RowType.FullWidthDetail) {\n                    this.controller.setupDetailRowAutoHeight(eGui);\n                }\n                this.setFullWidthRowComp(cellRenderer);\n            } else {\n                this.beans.context.destroyBean(cellRenderer);\n            }\n        };\n\n        // if doing master detail, it's possible we have a cached row comp from last time detail was displayed\n        const cachedDetailComp = this.beans.detailRowCompCache.get(this.rowNode, this.pinned);\n        if (cachedDetailComp) {\n            callback(cachedDetailComp);\n        } else {\n            const cellRendererType = FullWidthKeys.get(this.controller.getRowType())!;\n            const cellRendererName = FullWidthRenderers.get(this.controller.getRowType())!;\n\n            const res = this.beans.userComponentFactory.newFullWidthCellRenderer(\n                params,\n                cellRendererType,\n                cellRendererName\n            );\n\n            if (res) {\n                res.then(callback);\n            } else {\n                const masterDetailModuleLoaded = ModuleRegistry.isRegistered(ModuleNames.MasterDetailModule);\n                if (cellRendererName === 'agDetailCellRenderer' && !masterDetailModuleLoaded) {\n                    console.warn(`AG Grid: cell renderer agDetailCellRenderer (for master detail) not found. Did you forget to include the master detail module?`);\n                } else {\n                    console.error(`AG Grid: fullWidthCellRenderer ${cellRendererName} not found`);\n                }\n            }\n        }\n\n        // fixme - what to do here?\n        // this.angular1Compile(eRow);\n    }\n\n    public onColumnChanged(): void {\n        const cols = this.controller.getColsForRowComp(this.pinned);\n        const cellsToRemove = assign({}, this.cellComps);\n\n        cols.forEach(col => {\n            const colId = col.getId();\n            let existingCellComp = this.cellComps[colId];\n\n            // it's possible there is a Cell Comp with correct Id, but it's referring to\n            // a different column instance. Happens a lot with pivot, as pivot col id's are\n            // reused eg  pivot_0, pivot_1 etc\n            if (existingCellComp && existingCellComp.getColumn() !== col) {\n                this.destroyCells([existingCellComp]);\n                existingCellComp = null;\n            }\n\n            if (existingCellComp == null) {\n                this.newCellComp(col);\n            } else {\n                cellsToRemove[colId] = null;\n            }\n        });\n\n        const cellCompsToRemove = getAllValuesInObject(cellsToRemove)\n            .filter(cellComp => cellComp ? this.isCellEligibleToBeRemoved(cellComp) : false);\n\n        this.destroyCells(cellCompsToRemove as CellComp[]);\n        this.ensureDomOrder(cols);\n    }\n\n    private ensureDomOrder(cols: Column[]): void {\n        if (!this.beans.gridOptionsWrapper.isEnsureDomOrder()) { return; }\n\n        const elementsInOrder: HTMLElement[] = [];\n        cols.forEach(col => {\n            const cellComp = this.cellComps[col.getColId()];\n            if (cellComp) {\n                elementsInOrder.push(cellComp.getGui());\n            }\n        });\n\n        setDomChildOrder(this.getGui(), elementsInOrder);\n    }\n\n    private isCellEligibleToBeRemoved(cellComp: CellComp): boolean {\n        const REMOVE_CELL = true;\n        const KEEP_CELL = false;\n\n        // always remove the cell if it's not rendered or if it's in the wrong pinned location\n        const column = cellComp.getColumn();\n        if (column.getPinned() != this.pinned) { return REMOVE_CELL; }\n\n        // we want to try and keep editing and focused cells\n        const editing = cellComp.isEditing();\n        const focused = this.beans.focusController.isCellFocused(cellComp.getCellPosition());\n\n        const mightWantToKeepCell = editing || focused;\n\n        if (mightWantToKeepCell) {\n            const column = cellComp.getColumn();\n            const displayedColumns = this.beans.columnController.getAllDisplayedColumns();\n            const cellStillDisplayed = displayedColumns.indexOf(column) >= 0;\n            return cellStillDisplayed ? KEEP_CELL : REMOVE_CELL;\n        }\n\n        return REMOVE_CELL;\n    }\n\n    private newCellComp(col: Column): void {\n        const cellComp = new CellComp(this.controller.getScope(), this.beans, col, this.rowNode, this.controller,\n            false, this.controller.isPrintLayout(), this.getGui(), this.controller.isEditing());\n        this.cellComps[col.getId()] = cellComp;\n        this.getGui().appendChild(cellComp.getGui());\n    }\n\n    public getCellComp(id: string): CellComp | null {\n        return this.cellComps[id];\n    }\n\n    public getCellCompSpanned(column: Column): CellComp | null {\n        const spanList = Object.keys(this.cellComps)\n            .map(name => this.cellComps[name])\n            .filter(cmp => cmp && cmp.getColSpanningList().indexOf(column) !== -1);\n        return spanList.length ? spanList[0] : null;\n    }\n\n    public destroy(): void {\n        super.destroy();\n        this.destroyAllCells();\n    }\n\n    private destroyAllCells(): void {\n        const cellsToDestroy = getAllValuesInObject(this.cellComps).filter(cp => cp != null);\n        this.destroyCells(cellsToDestroy as CellComp[]);\n    }\n\n    public getContainer(): RowContainerComp {\n        return this.container;\n    }\n\n    public setFullWidthRowComp(fullWidthRowComponent: ICellRendererComp): void {\n        if (this.fullWidthRowComponent) {\n            console.error('AG Grid - should not be setting fullWidthRowComponent twice');\n        }\n\n        this.fullWidthRowComponent = fullWidthRowComponent;\n        this.addDestroyFunc(() => {\n            this.beans.detailRowCompCache.addOrDestroy(this.rowNode, this.pinned, fullWidthRowComponent);\n            this.fullWidthRowComponent = null;\n        });\n    }\n\n    public getFullWidthRowComp(): ICellRendererComp | null | undefined {\n        return this.fullWidthRowComponent;\n    }\n\n    private createTemplate(): string {\n        const con = this.controller;\n\n        const templateParts: string[] = [];\n        const rowHeight = this.rowNode.rowHeight;\n        const rowClasses = con.getInitialRowClasses(this.pinned).join(' ');\n        const rowIdSanitised = escapeString(this.rowNode.id!);\n        const userRowStyles = con.preProcessStylesFromGridOptions();\n        const businessKey = con.getRowBusinessKey();\n        const businessKeySanitised = escapeString(businessKey!);\n        const rowTopStyle = con.getInitialRowTopStyle();\n        const rowIdx = this.rowNode.getRowIndexString();\n        const headerRowCount = this.beans.headerNavigationService.getHeaderRowCount();\n\n        templateParts.push(`<div`);\n        templateParts.push(` role=\"row\"`);\n        templateParts.push(` row-index=\"${rowIdx}\" aria-rowindex=\"${headerRowCount + this.rowNode.rowIndex! + 1}\"`);\n        templateParts.push(rowIdSanitised ? ` row-id=\"${rowIdSanitised}\"` : ``);\n        templateParts.push(businessKey ? ` row-business-key=\"${businessKeySanitised}\"` : ``);\n        templateParts.push(` comp-id=\"${this.getCompId()}\"`);\n        templateParts.push(` class=\"${rowClasses}\"`);\n\n        if (con.isFullWidth()) {\n            templateParts.push(` tabindex=\"-1\"`);\n        }\n\n        if (this.beans.gridOptionsWrapper.isRowSelection()) {\n            templateParts.push(` aria-selected=\"${this.rowNode.isSelected() ? 'true' : 'false'}\"`);\n        }\n\n        if (this.rowNode.group) {\n            templateParts.push(` aria-expanded=${this.rowNode.expanded ? 'true' : 'false'}`);\n        }\n\n        templateParts.push(` style=\"height: ${rowHeight}px; ${rowTopStyle} ${userRowStyles}\">`);\n\n        // add in the template for the cells\n        templateParts.push(`</div>`);\n\n        return templateParts.join('');\n    }\n\n    private afterRowAttached(): void {\n        this.addDomData();\n\n        const eRow = this.getGui();\n\n        // adding hover functionality adds listener to this row, so we\n        // do it lazily in an animation frame\n        if (this.controller.isUseAnimationFrameForCreate()) {\n            this.beans.taskQueue.createTask(\n                this.controller.addHoverFunctionality.bind(this.controller, eRow),\n                this.rowNode.rowIndex!,\n                'createTasksP2'\n            );\n        } else {\n            this.controller.addHoverFunctionality(eRow);\n        }\n\n        this.controller.executeProcessRowPostCreateFunc();\n    }\n\n    private addDomData(): void {\n        const gow = this.beans.gridOptionsWrapper;\n        gow.setDomData(this.getGui(), RowController.DOM_DATA_KEY_RENDERED_ROW, this.controller);\n        this.addDestroyFunc(\n            () => gow.setDomData(this.getGui(), RowController.DOM_DATA_KEY_RENDERED_ROW, null)\n        );\n    }\n\n    public destroyCells(cellComps: CellComp[]): void {\n        cellComps.forEach(cellComp => {\n\n            // could be old reference, ie removed cell\n            if (!cellComp) { return; }\n\n            // check cellComp belongs in this container\n            const id = cellComp.getColumn().getId();\n            if (this.cellComps[id] !== cellComp) {return; }\n\n            cellComp.detach();\n            cellComp.destroy();\n            this.cellComps[id] = null;\n        });\n    }\n\n    public forEachCellComp(callback: (renderedCell: CellComp) => void): void {\n        iterateObject(this.cellComps, (key: any, cellComp: CellComp) => {\n            if (!cellComp) { return; }\n            callback(cellComp);\n        });\n    }\n}\n"]}