{"version":3,"sources":["../../src/ts/rendering/cellRenderers/groupCellRenderer.ts"],"names":[],"mappings":"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","file":"groupCellRenderer.js","sourcesContent":["import { ExpressionService } from \"../../valueService/expressionService\";\nimport { Constants } from \"../../constants/constants\";\nimport { Autowired } from \"../../context/context\";\nimport { Component } from \"../../widgets/component\";\nimport { ICellRendererComp, ICellRendererFunc, ICellRendererParams } from \"./iCellRenderer\";\nimport { RowNode } from \"../../entities/rowNode\";\nimport { CheckboxSelectionComponent } from \"../checkboxSelectionComponent\";\nimport { Column } from \"../../entities/column\";\nimport { RefSelector } from \"../../widgets/componentAnnotations\";\nimport { ColDef } from \"../../entities/colDef\";\nimport {\n    ComponentClassDef,\n    ComponentSource,\n    UserComponentFactory\n} from \"../../components/framework/userComponentFactory\";\nimport { AgPromise } from \"../../utils\";\nimport { doOnce } from \"../../utils/function\";\nimport { get, cloneObject } from \"../../utils/object\";\nimport { bindCellRendererToHtmlElement } from \"../../utils/general\";\nimport { addOrRemoveCssClass, setDisplayed } from \"../../utils/dom\";\nimport { createIconNoSpan } from \"../../utils/icon\";\nimport { isKeyPressed } from \"../../utils/keyboard\";\nimport { missing } from \"../../utils/generic\";\nimport { isStopPropagationForAgGrid, stopPropagationForAgGrid, isElementInEventPath } from \"../../utils/event\";\nimport { setAriaExpanded, removeAriaExpanded } from \"../../utils/aria\";\nimport { KeyCode } from '../../constants/keyCode';\nimport { ValueFormatterService } from \"../valueFormatterService\";\nimport { ColumnController } from \"../../columnController/columnController\";\nimport { RowRenderer } from \"../rowRenderer\";\nimport { RowDragComp } from \"../row/rowDragComp\";\n\nexport interface GroupCellRendererParams extends ICellRendererParams {\n    // only when in fullWidth, this gives whether the comp is pinned or not.\n    // if not doing fullWidth, then this is not provided, as pinned can be got from the column.\n    pinned: string;\n    // true if comp is showing full width\n    fullWidth: boolean;\n\n    suppressPadding: boolean;\n    suppressDoubleClickExpand: boolean;\n    suppressEnterExpand: boolean;\n    footerValueGetter: any;\n    suppressCount: boolean;\n    checkbox: any;\n    rowDrag?: boolean;\n\n    innerRenderer?: { new(): ICellRendererComp; } | ICellRendererFunc | string;\n    innerRendererFramework?: any;\n    innerRendererParams?: any;\n\n    scope: any;\n\n    /** @deprecated */\n    padding: number;\n}\n\nexport class GroupCellRenderer extends Component implements ICellRendererComp {\n\n    private static TEMPLATE = /* html */\n        `<span class=\"ag-cell-wrapper\">\n            <span class=\"ag-group-expanded\" ref=\"eExpanded\"></span>\n            <span class=\"ag-group-contracted\" ref=\"eContracted\"></span>\n            <span class=\"ag-group-checkbox ag-invisible\" ref=\"eCheckbox\"></span>\n            <span class=\"ag-group-value\" ref=\"eValue\"></span>\n            <span class=\"ag-group-child-count\" ref=\"eChildCount\"></span>\n        </span>`;\n\n    @Autowired('rowRenderer') private rowRenderer: RowRenderer;\n    @Autowired('expressionService') private expressionService: ExpressionService;\n    @Autowired('valueFormatterService') private valueFormatterService: ValueFormatterService;\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('userComponentFactory') private userComponentFactory: UserComponentFactory;\n\n    @RefSelector('eExpanded') private eExpanded: HTMLElement;\n    @RefSelector('eContracted') private eContracted: HTMLElement;\n    @RefSelector('eCheckbox') private eCheckbox: HTMLElement;\n    @RefSelector('eValue') private eValue: HTMLElement;\n    @RefSelector('eChildCount') private eChildCount: HTMLElement;\n\n    private params: GroupCellRendererParams;\n\n    // will be true if the node was pulled down\n    private draggedFromHideOpenParents: boolean;\n\n    // this is normally the rowNode of this row, however when doing hideOpenParents, it will\n    // be the parent who's details we are actually showing if the data was pulled down.\n    private displayedGroup: RowNode;\n\n    private cellIsBlank: boolean;\n\n    // keep reference to this, so we can remove again when indent changes\n    private indentClass: string;\n\n    // this cell renderer\n    private innerCellRenderer: ICellRendererComp;\n\n    constructor() {\n        super(GroupCellRenderer.TEMPLATE);\n    }\n\n    private isTopLevelFooter(): boolean {\n        if (!this.gridOptionsWrapper.isGroupIncludeTotalFooter()) { return false; }\n\n        if (this.params.value != null || this.params.node.level != -1) { return false; }\n\n        // at this point, we know it's the root node and there is no value present, so it's a footer cell.\n        // the only thing to work out is if we are displaying groups  across multiple\n        // columns (groupMultiAutoColumn=true), we only want 'total' to appear in the first column.\n\n        const colDef = this.params.colDef;\n        const doingFullWidth = colDef == null;\n        if (doingFullWidth) { return true; }\n\n        if (colDef!.showRowGroup === true) { return true; }\n\n        const rowGroupCols = this.columnController.getRowGroupColumns();\n        // this is a sanity check, rowGroupCols should always be present\n        if (!rowGroupCols || rowGroupCols.length === 0) { return true; }\n\n        const firstRowGroupCol = rowGroupCols[0];\n\n        return firstRowGroupCol.getId() === colDef!.showRowGroup;\n    }\n\n    public init(params: GroupCellRendererParams): void {\n        this.params = params;\n\n        const topLevelFooter = this.isTopLevelFooter();\n\n        const embeddedRowMismatch = this.isEmbeddedRowMismatch();\n        // This allows for empty strings to appear as groups since\n        // it will only return for null or undefined.\n        const nullValue = params.value == null;\n        let skipCell = false;\n\n        // if the groupCellRenderer is inside of a footer and groupHideOpenParents is true\n        // we should only display the groupCellRenderer if the current column is the rowGroupedColumn\n        if (this.gridOptionsWrapper.isGroupIncludeFooter() && this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            const node = params.node;\n\n            if (node.footer) {\n                const showRowGroup = params.colDef && params.colDef.showRowGroup;\n                const rowGroupColumnId = node.rowGroupColumn && node.rowGroupColumn.getColId();\n\n                skipCell = showRowGroup !== rowGroupColumnId;\n            }\n        }\n\n        this.cellIsBlank = topLevelFooter ? false : (embeddedRowMismatch || nullValue || skipCell);\n\n        if (this.cellIsBlank) { return; }\n\n        this.setupDragOpenParents();\n        this.addFullWidthRowDraggerIfNeeded();\n        this.addExpandAndContract();\n        this.addCheckboxIfNeeded();\n        this.addValueElement();\n        this.setupIndent();\n    }\n\n    // if we are doing embedded full width rows, we only show the renderer when\n    // in the body, or if pinning in the pinned section, or if pinning and RTL,\n    // in the right section. otherwise we would have the cell repeated in each section.\n    private isEmbeddedRowMismatch(): boolean {\n        if (!this.params.fullWidth || !this.gridOptionsWrapper.isEmbedFullWidthRows()) { return false; }\n\n        const pinnedLeftCell = this.params.pinned === Constants.PINNED_LEFT;\n        const pinnedRightCell = this.params.pinned === Constants.PINNED_RIGHT;\n        const bodyCell = !pinnedLeftCell && !pinnedRightCell;\n\n        if (this.gridOptionsWrapper.isEnableRtl()) {\n            if (this.columnController.isPinningLeft()) {\n                return !pinnedRightCell;\n            }\n            return !bodyCell;\n        }\n\n        if (this.columnController.isPinningLeft()) {\n            return !pinnedLeftCell;\n        }\n\n        return !bodyCell;\n    }\n\n    private setIndent(): void {\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) { return; }\n\n        const params = this.params;\n        const rowNode: RowNode = params.node;\n        // if we are only showing one group column, we don't want to be indenting based on level\n        const fullWithRow = !!params.colDef;\n        const manyDimensionThisColumn = !fullWithRow || params.colDef!.showRowGroup === true;\n        const paddingCount = manyDimensionThisColumn ? rowNode.uiLevel : 0;\n        const userProvidedPaddingPixelsTheDeprecatedWay = params.padding >= 0;\n\n        if (userProvidedPaddingPixelsTheDeprecatedWay) {\n            this.setPaddingDeprecatedWay(paddingCount, params.padding);\n            return;\n        }\n\n        if (this.indentClass) {\n            this.removeCssClass(this.indentClass);\n        }\n\n        this.indentClass = 'ag-row-group-indent-' + paddingCount;\n        this.addCssClass(this.indentClass);\n    }\n\n    private setPaddingDeprecatedWay(paddingCount: number, padding: number): void {\n        doOnce(() => console.warn('AG Grid: since v14.2, configuring padding for groupCellRenderer should be done with Sass variables and themes. Please see the AG Grid documentation page for Themes, in particular the property $row-group-indent-size.'), 'groupCellRenderer->doDeprecatedWay');\n\n        const paddingPx = paddingCount * padding;\n        const eGui = this.getGui();\n        const paddingSide = this.gridOptionsWrapper.isEnableRtl() ? 'paddingRight' : 'paddingLeft';\n\n        eGui.style[paddingSide] = `${paddingPx}px`;\n    }\n\n    private setupIndent(): void {\n        // only do this if an indent - as this overwrites the padding that\n        // the theme set, which will make things look 'not aligned' for the\n        // first group level.\n        const node: RowNode = this.params.node;\n        const suppressPadding = this.params.suppressPadding;\n\n        if (!suppressPadding) {\n            this.addManagedListener(node, RowNode.EVENT_UI_LEVEL_CHANGED, this.setIndent.bind(this));\n            this.setIndent();\n        }\n    }\n\n    private addValueElement(): void {\n        if (this.displayedGroup.footer) {\n            this.addFooterValue();\n        } else {\n            this.addGroupValue();\n            this.addChildCount();\n        }\n    }\n\n    private addFooterValue(): void {\n        const footerValueGetter = this.params.footerValueGetter;\n        let footerValue: string;\n\n        if (footerValueGetter) {\n            // params is same as we were given, except we set the value as the item to display\n            const paramsClone: any = cloneObject(this.params);\n            paramsClone.value = this.params.value;\n\n            if (typeof footerValueGetter === 'function') {\n                footerValue = footerValueGetter(paramsClone);\n            } else if (typeof footerValueGetter === 'string') {\n                footerValue = this.expressionService.evaluate(footerValueGetter, paramsClone);\n            } else {\n                console.warn('AG Grid: footerValueGetter should be either a function or a string (expression)');\n            }\n        } else {\n            footerValue = 'Total ' + (this.params.value != null ? this.params.value : '');\n        }\n\n        this.eValue.innerHTML = footerValue!;\n    }\n\n    private addGroupValue(): void {\n        const params = this.params;\n        const rowGroupColumn = this.displayedGroup.rowGroupColumn;\n        // we try and use the cellRenderer of the column used for the grouping if we can\n        const columnToUse: Column = rowGroupColumn ? rowGroupColumn : params.column!;\n        const groupName = this.params.value;\n        const valueFormatted = columnToUse ?\n            this.valueFormatterService.formatValue(columnToUse, params.node, params.scope, groupName) : null;\n\n        params.valueFormatted = valueFormatted;\n\n        let rendererPromise: AgPromise<ICellRendererComp> | null;\n\n        rendererPromise = params.fullWidth\n            ? this.useFullWidth(params)\n            : this.useInnerRenderer(\n                this.params.colDef!.cellRendererParams,\n                columnToUse.getColDef(),\n                params\n            );\n\n        // retain a reference to the created renderer - we'll use this later for cleanup (in destroy)\n        if (rendererPromise) {\n            rendererPromise.then((value: ICellRendererComp) => {\n                this.innerCellRenderer = value;\n            });\n        }\n    }\n\n    private useInnerRenderer(\n        groupCellRendererParams: GroupCellRendererParams,\n        groupedColumnDef: ColDef, // the column this group row is for, eg 'Country'\n        params: ICellRendererParams\n    ): AgPromise<ICellRendererComp> | null {\n        // when grouping, the normal case is we use the cell renderer of the grouped column. eg if grouping by country\n        // and then rating, we will use the country cell renderer for each country group row and likewise the rating\n        // cell renderer for each rating group row.\n        //\n        // however if the user has innerCellRenderer defined, this gets preference and we don't use cell renderers\n        // of the grouped columns.\n        //\n        // so we check and use in the following order:\n        //\n        // 1) thisColDef.cellRendererParams.innerRenderer of the column showing the groups (eg auto group column)\n        // 2) groupedColDef.cellRenderer of the grouped column\n        // 3) groupedColDef.cellRendererParams.innerRenderer\n        let cellRendererPromise: AgPromise<ICellRendererComp> | null = null;\n\n        // we check if cell renderer provided for the group cell renderer, eg colDef.cellRendererParams.innerRenderer\n        const groupInnerRendererClass: ComponentClassDef<any, any, any> = this.userComponentFactory\n            .lookupComponentClassDef(groupCellRendererParams, \"innerRenderer\")!;\n\n        if (groupInnerRendererClass && groupInnerRendererClass.component != null\n            && groupInnerRendererClass.source != ComponentSource.DEFAULT) {\n            // use the renderer defined in cellRendererParams.innerRenderer\n            cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupCellRendererParams, params);\n        } else {\n            // otherwise see if we can use the cellRenderer of the column we are grouping by\n            const groupColumnRendererClass: ComponentClassDef<any, any, any> = this.userComponentFactory\n                .lookupComponentClassDef(groupedColumnDef, \"cellRenderer\")!;\n\n            if (\n                groupColumnRendererClass &&\n                groupColumnRendererClass.source != ComponentSource.DEFAULT\n            ) {\n                // Only if the original column is using a specific renderer, it it is a using a DEFAULT one ignore it\n                cellRendererPromise = this.userComponentFactory.newCellRenderer(groupedColumnDef, params);\n            } else if (\n                groupColumnRendererClass &&\n                groupColumnRendererClass.source == ComponentSource.DEFAULT &&\n                (get(groupedColumnDef, 'cellRendererParams.innerRenderer', null))\n            ) {\n                // EDGE CASE - THIS COMES FROM A COLUMN WHICH HAS BEEN GROUPED DYNAMICALLY, THAT HAS AS RENDERER 'group'\n                // AND HAS A INNER CELL RENDERER\n                cellRendererPromise = this.userComponentFactory.newInnerCellRenderer(groupedColumnDef.cellRendererParams, params);\n            } else {\n                // This forces the retrieval of the default plain cellRenderer that just renders the values.\n                cellRendererPromise = this.userComponentFactory.newCellRenderer({}, params);\n            }\n        }\n\n        if (cellRendererPromise != null) {\n            cellRendererPromise.then(rendererToUse => {\n                if (rendererToUse == null) {\n                    this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n                    return;\n                }\n                bindCellRendererToHtmlElement(cellRendererPromise!, this.eValue);\n            });\n        } else {\n            this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n\n        return cellRendererPromise;\n    }\n\n    private useFullWidth(params: ICellRendererParams): AgPromise<ICellRendererComp> | null {\n        const cellRendererPromise: AgPromise<ICellRendererComp> | null = this.userComponentFactory.newFullWidthGroupRowInnerCellRenderer(params);\n\n        if (cellRendererPromise != null) {\n            bindCellRendererToHtmlElement(cellRendererPromise, this.eValue);\n        } else {\n            this.eValue.innerText = params.valueFormatted != null ? params.valueFormatted : params.value;\n        }\n\n        return cellRendererPromise;\n    }\n\n    private addFullWidthRowDraggerIfNeeded(): void {\n        if (!this.params.fullWidth || !this.params.rowDrag) { return; }\n\n        const rowDragComp = new RowDragComp(() => this.params.value, this.params.node);\n        this.createManagedBean(rowDragComp, this.context);\n\n        this.getGui().insertAdjacentElement('afterbegin', rowDragComp.getGui());\n    }\n\n    private addChildCount(): void {\n        // only include the child count if it's included, eg if user doing custom aggregation,\n        // then this could be left out, or set to -1, ie no child count\n        if (this.params.suppressCount) { return; }\n\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, this.updateChildCount.bind(this));\n\n        // filtering changes the child count, so need to cater for it\n        this.updateChildCount();\n    }\n\n    private updateChildCount(): void {\n        const allChildrenCount = this.displayedGroup.allChildrenCount;\n        const showingGroupForThisNode = this.isShowRowGroupForThisRow();\n        const showCount = showingGroupForThisNode && allChildrenCount != null && allChildrenCount >= 0;\n        const countString = showCount ? `(${allChildrenCount})` : ``;\n        this.eChildCount.innerHTML = countString;\n    }\n\n    private isUserWantsSelected(): boolean {\n        const paramsCheckbox = this.params.checkbox;\n\n        if (typeof paramsCheckbox === 'function') { return paramsCheckbox(this.params); }\n\n        return paramsCheckbox === true;\n    }\n\n    private addCheckboxIfNeeded(): void {\n        const rowNode = this.displayedGroup;\n        const checkboxNeeded = this.isUserWantsSelected() &&\n            // footers cannot be selected\n            !rowNode.footer &&\n            // pinned rows cannot be selected\n            !rowNode.rowPinned &&\n            // details cannot be selected\n            !rowNode.detail;\n\n        if (checkboxNeeded) {\n            const cbSelectionComponent = new CheckboxSelectionComponent();\n            this.getContext().createBean(cbSelectionComponent);\n\n            cbSelectionComponent.init({ rowNode: rowNode, column: this.params.column });\n            this.eCheckbox.appendChild(cbSelectionComponent.getGui());\n            this.addDestroyFunc(() => this.getContext().destroyBean(cbSelectionComponent));\n        }\n\n        addOrRemoveCssClass(this.eCheckbox, 'ag-invisible', !checkboxNeeded);\n    }\n\n    private addExpandAndContract(): void {\n        const params = this.params;\n        const eGroupCell = params.eGridCell;\n        const eExpandedIcon = createIconNoSpan('groupExpanded', this.gridOptionsWrapper, null);\n        const eContractedIcon = createIconNoSpan('groupContracted', this.gridOptionsWrapper, null);\n\n        setAriaExpanded(eGroupCell, !!params.node.expanded);\n\n        if (eExpandedIcon) {\n            this.eExpanded.appendChild(eExpandedIcon);\n        }\n\n        if (eContractedIcon) {\n            this.eContracted.appendChild(eContractedIcon);\n        }\n\n        this.addManagedListener(this.eExpanded, 'click', this.onExpandClicked.bind(this));\n        this.addManagedListener(this.eContracted, 'click', this.onExpandClicked.bind(this));\n        // expand / contract as the user hits enter\n        this.addManagedListener(eGroupCell, 'keydown', this.onKeyDown.bind(this));\n        this.addManagedListener(params.node, RowNode.EVENT_EXPANDED_CHANGED, this.showExpandAndContractIcons.bind(this));\n\n        this.showExpandAndContractIcons();\n\n        // because we don't show the expand / contract when there are no children, we need to check every time\n        // the number of children change.\n        const expandableChangedListener = this.onRowNodeIsExpandableChanged.bind(this);\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_ALL_CHILDREN_COUNT_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_MASTER_CHANGED, expandableChangedListener);\n        this.addManagedListener(this.displayedGroup, RowNode.EVENT_HAS_CHILDREN_CHANGED, expandableChangedListener);\n\n        // if editing groups, then double click is to start editing\n        if (!this.gridOptionsWrapper.isEnableGroupEdit() && this.isExpandable() && !params.suppressDoubleClickExpand) {\n            this.addManagedListener(eGroupCell, 'dblclick', this.onCellDblClicked.bind(this));\n        }\n    }\n\n    private onRowNodeIsExpandableChanged(): void {\n        // maybe if no children now, we should hide the expand / contract icons\n        this.showExpandAndContractIcons();\n        // if we have no children, this impacts the indent\n        this.setIndent();\n    }\n\n    private onKeyDown(event: KeyboardEvent): void {\n        const enterKeyPressed = isKeyPressed(event, KeyCode.ENTER);\n\n        if (!enterKeyPressed || this.params.suppressEnterExpand) { return; }\n\n        const cellEditable = this.params.column && this.params.column.isCellEditable(this.params.node);\n\n        if (cellEditable) { return; }\n\n        this.onExpandOrContract();\n    }\n\n    private setupDragOpenParents(): void {\n        const column = this.params.column;\n        const rowNode: RowNode = this.params.node;\n\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            this.draggedFromHideOpenParents = false;\n        } else if (!rowNode.hasChildren()) {\n            // if we are here, and we are not a group, then we must of been dragged down,\n            // as otherwise the cell would be blank, and if cell is blank, this method is never called.\n            this.draggedFromHideOpenParents = true;\n        } else {\n            const rowGroupColumn = rowNode.rowGroupColumn;\n            if (rowGroupColumn) {\n                // if the displayGroup column for this col matches the rowGroupColumn we grouped by for this node,\n                // then nothing was dragged down\n                this.draggedFromHideOpenParents = !column!.isRowGroupDisplayed(rowGroupColumn.getId());\n            } else {\n                // the only way we can end up here (no column, but a group) is if we are at the root node,\n                // which only happens when 'groupIncludeTotalFooter' is true. here, we are never dragging\n                this.draggedFromHideOpenParents = false;\n            }\n        }\n\n        if (this.draggedFromHideOpenParents) {\n            let pointer = rowNode.parent;\n\n            while (true) {\n                if (missing(pointer)) {\n                    break;\n                }\n                if (pointer.rowGroupColumn && column!.isRowGroupDisplayed(pointer.rowGroupColumn.getId())) {\n                    this.displayedGroup = pointer;\n                    break;\n                }\n                pointer = pointer.parent;\n            }\n        }\n\n        // if we didn't find a displayed group, set it to the row node\n        if (missing(this.displayedGroup)) {\n            this.displayedGroup = rowNode;\n        }\n    }\n\n    public onExpandClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // so if we expand a node, it does not also get selected.\n        stopPropagationForAgGrid(mouseEvent);\n\n        this.onExpandOrContract();\n    }\n\n    public onCellDblClicked(mouseEvent: MouseEvent): void {\n        if (isStopPropagationForAgGrid(mouseEvent)) { return; }\n\n        // we want to avoid acting on double click events on the expand / contract icon,\n        // as that icons already has expand / collapse functionality on it. otherwise if\n        // the icon was double clicked, we would get 'click', 'click', 'dblclick' which\n        // is open->close->open, however double click should be open->close only.\n        const targetIsExpandIcon\n            = isElementInEventPath(this.eExpanded, mouseEvent)\n            || isElementInEventPath(this.eContracted, mouseEvent);\n\n        if (!targetIsExpandIcon) {\n            this.onExpandOrContract();\n        }\n    }\n\n    public onExpandOrContract(): void {\n        // must use the displayedGroup, so if data was dragged down, we expand the parent, not this row\n        const rowNode: RowNode = this.displayedGroup;\n        const params = this.params;\n        const nextExpandState = !rowNode.expanded;\n\n        rowNode.setExpanded(nextExpandState);\n        setAriaExpanded(params.eGridCell, nextExpandState);\n    }\n\n    private isShowRowGroupForThisRow(): boolean {\n        if (this.gridOptionsWrapper.isTreeData()) { return true; }\n\n        const rowGroupColumn = this.displayedGroup.rowGroupColumn;\n\n        if (!rowGroupColumn) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const thisColumnIsInterested = column == null || column.isRowGroupDisplayed(rowGroupColumn.getId());\n\n        return thisColumnIsInterested;\n    }\n\n    private isExpandable(): boolean {\n        if (this.draggedFromHideOpenParents) { return true; }\n\n        const rowNode = this.displayedGroup;\n        const reducedLeafNode = this.columnController.isPivotMode() && rowNode.leafGroup;\n        const expandableGroup = rowNode.isExpandable() && !rowNode.footer && !reducedLeafNode;\n\n        if (!expandableGroup) { return false; }\n\n        // column is null for fullWidthRows\n        const column = this.params.column;\n        const displayingForOneColumnOnly = column != null && typeof column.getColDef().showRowGroup === 'string';\n\n        if (displayingForOneColumnOnly) {\n            const showing = this.isShowRowGroupForThisRow();\n            return showing;\n        }\n\n        return true;\n    }\n\n    private showExpandAndContractIcons(): void {\n        const { eContracted, eExpanded, params, displayedGroup, columnController } = this;\n        const { eGridCell, node } = params;\n\n        const isExpandable = this.isExpandable();\n\n        if (isExpandable) {\n            // if expandable, show one based on expand state.\n            // if we were dragged down, means our parent is always expanded\n            const expanded = this.draggedFromHideOpenParents ? true : node.expanded;\n            setDisplayed(eContracted, !expanded);\n            setDisplayed(eExpanded, expanded);\n        } else {\n            // it not expandable, show neither\n            removeAriaExpanded(eGridCell);\n            setDisplayed(eExpanded, false);\n            setDisplayed(eContracted, false);\n        }\n\n        // compensation padding for leaf nodes, so there is blank space instead of the expand icon\n        const pivotMode = columnController.isPivotMode();\n        const pivotModeAndLeafGroup = pivotMode && displayedGroup.leafGroup;\n        const addExpandableCss = isExpandable && !pivotModeAndLeafGroup;\n        const isTotalFooterNode = node.footer && node.level === -1;\n\n        this.addOrRemoveCssClass('ag-cell-expandable', addExpandableCss);\n        this.addOrRemoveCssClass('ag-row-group', addExpandableCss);\n\n        if (pivotMode) {\n            this.addOrRemoveCssClass('ag-pivot-leaf-group', pivotModeAndLeafGroup);\n        } else if (!isTotalFooterNode) {\n            this.addOrRemoveCssClass('ag-row-group-leaf-indent', !addExpandableCss);\n        }\n    }\n\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to have public here instead of private or protected\n    public destroy(): void {\n        this.getContext().destroyBean(this.innerCellRenderer);\n        super.destroy();\n    }\n\n    public refresh(): boolean {\n        return false;\n    }\n}\n"]}