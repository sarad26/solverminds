{"version":3,"sources":["../../src/ts/headless/headlessService.ts"],"names":[],"mappings":"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","file":"headlessService.js","sourcesContent":["import { Autowired, Bean, PostConstruct } from \"../context/context\";\nimport { ColumnController } from \"../columnController/columnController\";\nimport { ColumnGroupChild } from \"../entities/columnGroupChild\";\nimport { Column } from \"../entities/column\";\nimport { ColumnGroup } from \"../entities/columnGroup\";\nimport { PaginationProxy } from \"../pagination/paginationProxy\";\nimport { ValueService } from \"../valueService/valueService\";\nimport { BeanStub } from \"../context/beanStub\";\nimport { Events } from \"../eventKeys\";\n\nexport interface HeaderRowSt {\n    headerRowIndex: number;\n    groupLevel: boolean;\n    columns: ColumnSt[];\n}\n\nexport interface ColumnSt {\n    name: string | null;\n    id: string;\n}\n\nexport interface RowSt {\n    index: number;\n    cells: CellSt[];\n    id: string;\n    height: number;\n    top: number;\n}\n\nexport interface CellSt {\n    value: any;\n    colId: string;\n    width: number;\n    left: number;\n}\n\nexport interface RowContainerSt {\n    height: number;\n    width: number;\n}\n\n@Bean('headlessService')\nexport class HeadlessService extends BeanStub {\n\n    @Autowired('columnController') private columnController: ColumnController;\n    @Autowired('paginationProxy') private paginationProxy: PaginationProxy;\n    @Autowired('valueService') private valueService: ValueService;\n\n    public static EVENT_ROWS_UPDATED = 'rowsUpdated';\n    public static EVENT_HEADERS_UPDATED = 'headersUpdated';\n    public static EVENT_ROW_CONTAINER_UPDATED = 'rowContainerUpdated';\n\n    private headerRows: HeaderRowSt[];\n    private rows: RowSt[];\n    private centerRowContainer: RowContainerSt;\n\n    public getHeaderRows(): HeaderRowSt[] {\n        return this.headerRows;\n    }\n\n    public getRows(): RowSt[] {\n        return this.rows;\n    }\n\n    public getCenterRowContainer(): RowContainerSt {\n        return this.centerRowContainer;\n    }\n\n    @PostConstruct\n    private postConstruct(): void {\n        this.createHeaderRows();\n        this.onPageLoaded();\n\n        this.addManagedListener(this.eventService, Events.EVENT_PAGINATION_CHANGED, this.onPageLoaded.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_CHANGED, () => {\n            this.createHeaderRows();\n            this.onPageLoaded();\n        });\n    }\n\n    private createHeaderRows(): void {\n        this.headerRows = [];\n\n        const headerRowCount = this.columnController.getHeaderRowCount();\n        for (let i = 0; i < headerRowCount; i++) {\n            const groupLevel = i === (headerRowCount - 1);\n            this.headerRows.push(this.createHeaderRow(i, groupLevel));\n        }\n\n        this.dispatchEvent({type: HeadlessService.EVENT_HEADERS_UPDATED});\n    }\n\n    public onPageLoaded(): void {\n        this.rows = [];\n\n        const firstRow = this.paginationProxy.getPageFirstRow();\n        const lastRow = this.paginationProxy.getPageLastRow();\n\n        // first and last rows are -1 if no rows to display\n        if (firstRow < 0 || lastRow < 0) { return; }\n\n        const displayedColumns = this.columnController.getDisplayedColumns(null);\n\n        for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n            const rowNode = this.paginationProxy.getRow(rowIndex);\n            if (!rowNode) { continue; }\n            const cells: CellSt[] = [];\n            const rowVo: RowSt = {\n                cells,\n                index: rowIndex,\n                id: rowNode.id!,\n                height: rowNode.rowHeight!,\n                top: rowNode.rowTop!\n            };\n            displayedColumns.forEach(col => {\n                cells.push({\n                    value: this.valueService.getValue(col, rowNode),\n                    colId: col.getId(),\n                    width: col.getActualWidth(),\n                    left: col.getLeft()!\n                });\n            });\n            this.rows.push(rowVo);\n        }\n\n        this.dispatchEvent({type: HeadlessService.EVENT_ROWS_UPDATED});\n\n        this.centerRowContainer = {\n            height: Math.max(this.paginationProxy.getCurrentPageHeight(), 1),\n            width: this.columnController.getBodyContainerWidth()\n        };\n        this.dispatchEvent({type: HeadlessService.EVENT_ROW_CONTAINER_UPDATED});\n    }\n\n    private createHeaderRow(depth: number, groupLevel: boolean): HeaderRowSt {\n        const items = this.columnController.getVirtualHeaderGroupRow(null, depth);\n\n        const mapColumn = (item: ColumnGroupChild): ColumnSt => {\n            const isCol = item instanceof Column;\n            const name = isCol\n                ? this.columnController.getDisplayNameForColumn(item as Column, 'header')\n                : this.columnController.getDisplayNameForColumnGroup(item as ColumnGroup, 'header');\n            const res: ColumnSt = {\n                name,\n                id: item.getUniqueId()\n            };\n            return res;\n        };\n\n        const res: HeaderRowSt = {\n            headerRowIndex: depth,\n            groupLevel,\n            columns: items.map(mapColumn)\n        };\n        return res;\n    }\n\n}\n"]}